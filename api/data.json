{
    "project": {},
    "files": {
        "/Users/lsmith/dev/yui3-gallery/src/gallery-datatable-350-preview/js/datatable.js": {
            "name": "/Users/lsmith/dev/yui3-gallery/src/gallery-datatable-350-preview/js/datatable.js",
            "modules": {
                "datatable-core": 1,
                "datatable-head": 1,
                "datatable-body": 1,
                "datatable-base": 1,
                "datatable-mutable": 1,
                "datatable-message": 1,
                "datatable-column-widths": 1,
                "datatable-scroll": 1,
                "datatable-sort": 1
            },
            "classes": {
                "DataTable.Core": 1,
                "DataTable.HeaderView": 1,
                "DataTable.BodyView": 1,
                "DataTable": 1,
                "DataTable.Base": 1,
                "DataTable.Mutable": 1,
                "DataTable.Message": 1,
                "DataTable.ColumnWidths": 1,
                "DataTable.Scrollable": 1,
                "DataTable.Sortable": 1
            },
            "fors": {
                "DataTable": 1
            },
            "namespaces": {
                "DataTable": 1
            }
        },
        "/Users/lsmith/dev/yui3-gallery/src/gallery-jsonp/js/jsonp.js": {
            "name": "/Users/lsmith/dev/yui3-gallery/src/gallery-jsonp/js/jsonp.js",
            "modules": {
                "gallery-jsonp": 1
            },
            "classes": {
                "JSONPRequest": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "/Users/lsmith/dev/yui3-gallery/src/gallery-torelativetime/js/torelativetime.js": {
            "name": "/Users/lsmith/dev/yui3-gallery/src/gallery-torelativetime/js/torelativetime.js",
            "modules": {
                "gallery-torelativetime": 1
            },
            "classes": {
                "YUI~toRelativeTime": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "/Users/lsmith/dev/yui3-gallery/src/gallery-dataschema-class/js/dataschema-class.js": {
            "name": "/Users/lsmith/dev/yui3-gallery/src/gallery-dataschema-class/js/dataschema-class.js",
            "modules": {
                "dataschema": 1,
                "dataschema-class": 1
            },
            "classes": {
                "DataSchema": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "/Users/lsmith/dev/yui3-gallery/src/gallery-pluginattr/js/attr.js": {
            "name": "/Users/lsmith/dev/yui3-gallery/src/gallery-pluginattr/js/attr.js",
            "modules": {
                "gallery-pluginattr": 1
            },
            "classes": {},
            "fors": {
                "Plugin": 1
            },
            "namespaces": {}
        },
        "/Users/lsmith/dev/yui3-gallery/src/gallery-event-konami/js/konami.js": {
            "name": "/Users/lsmith/dev/yui3-gallery/src/gallery-event-konami/js/konami.js",
            "modules": {
                "event-konami": 1
            },
            "classes": {
                "YUI~event-konami": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "/Users/lsmith/dev/yui3-gallery/src/gallery-event-drag/js/event-drag.js": {
            "name": "/Users/lsmith/dev/yui3-gallery/src/gallery-event-drag/js/event-drag.js",
            "modules": {
                "event-drag": 1
            },
            "classes": {
                "YUI~event-drag": 1
            },
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {
        "datatable-core": {
            "name": "datatable-core",
            "submodules": {},
            "classes": {},
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "/Users/lsmith/dev/yui3-gallery/src/gallery-datatable-350-preview/js/datatable.js",
            "line": 2,
            "description": "The core implementation of the `DataTable` and `DataTable.Base` Widgets.\n\nUse this class extension with Widget or another Base-based superclass to create\nthe basic DataTable API and composing class structure.\n\nNotable about this architecture is that rendering and UI event management for\nthe header, body, and footer of the table are deferred to configurable classes\nin the `headerView`, `bodyView`, and `footerView` attributes.  In this extension\nthey have no default values, requiring implementers to supply their own classes\nto render the table content."
        },
        "datatable-head": {
            "name": "datatable-head",
            "submodules": {},
            "classes": {
                "DataTable.Core": 1
            },
            "fors": {},
            "namespaces": {
                "DataTable": 1
            },
            "tag": "module",
            "file": "/Users/lsmith/dev/yui3-gallery/src/gallery-datatable-350-preview/js/datatable.js",
            "line": 1424,
            "description": "View class responsible for rendering the `<thead>` section of a table. Used as\nthe default `headerView` for `Y.DataTable.Base` and `Y.DataTable` classes.\n\nTranslates the provided array of column configuration objects into a rendered\n`<thead>` based on the data in those objects.\n    \n\nThe structure of the column data is expected to be a single array of objects,\nwhere each object corresponds to a `<th>`.  Those objects may contain a\n`children` property containing a similarly structured array to indicate the\nnested cells should be grouped under the parent column's colspan in a separate\nrow of header cells. E.g.\n\n<pre><code>\nnew Y.DataTable.HeaderView({\n  container: tableNode,\n  columns: [\n    { key: 'id' }, // no nesting\n    { key: 'name', children: [\n      { key: 'firstName', label: 'First' },\n      { key: 'lastName',  label: 'Last' } ] }\n  ]\n}).render();\n</code></pre>\n\nThis would translate to the following visualization:\n\n<pre>\n---------------------\n|    |     name     |\n|    |---------------\n| id | First | Last |\n---------------------\n</pre>\n\nSupported properties of the column objects include:\n\n  * `label`     - The HTML content of the header cell.\n  * `key`       - If `label` is not specified, the `key` is used for content.\n  * `children`  - Array of columns to appear below this column in the next\n                  row.\n  * `headerTemplate` - Overrides the instance's `CELL_TEMPLATE` for cells in this\n    column only.\n  * `abbr`      - The content of the 'abbr' attribute of the `<th>`\n  * `className` - Adds this string of CSS classes to the column header\n\nThrough the life of instantiation and rendering, the column objects will have\nthe following properties added to them:\n\n  * `_colspan` - To supply the `<th>` attribute\n  * `_rowspan` - To supply the `<th>` attribute\n  * `_parent`  - If the column is a child of another column, this points to\n    its parent column\n  * `_yuid`    - (Added by DataTable) A unique YUI generated id used as the\n    `<th>`'s 'id' for reference in the data `<td>`'s 'headers' attribute.\n\nThe column object is also used to provide values for {placeholder} tokens in the\ninstance's `CELL_TEMPLATE`, so you can modify the template and include other\ncolumn object properties to populate them.",
            "extends": "View"
        },
        "datatable-body": {
            "name": "datatable-body",
            "submodules": {},
            "classes": {
                "DataTable.HeaderView": 1
            },
            "fors": {},
            "namespaces": {
                "DataTable": 1
            },
            "tag": "module",
            "file": "/Users/lsmith/dev/yui3-gallery/src/gallery-datatable-350-preview/js/datatable.js",
            "line": 1893,
            "description": "View class responsible for rendering the `<tbody>` section of a table. Used as\nthe default `bodyView` for `Y.DataTable.Base` and `Y.DataTable` classes.\n\nTranslates the provided `modelList` into a rendered `<tbody>` based on the data\nin the constituent Models, altered or ammended by any special column\nconfigurations.\n\nThe `columns` configuration, passed to the constructor, determines which\ncolumns will be rendered.\n\nThe rendering process involves constructing an HTML template for a complete row\nof data, built by concatenating a customized copy of the instance's\n`CELL_TEMPLATE` into the `ROW_TEMPLATE` once for each column.  This template is\nthen populated with values from each Model in the `modelList`, aggregating a\ncomplete HTML string of all row and column data.  A `<tbody>` Node is then created from the markup and any column `nodeFormatter`s are applied.\n\nSupported properties of the column objects include:\n\n  * `key` - Used to link a column to an attribute in a Model.\n  * `name` - Used for columns that don't relate to an attribute in the Model\n    (`formatter` or `nodeFormatter` only) if the implementer wants a\n    predictable name to refer to in their CSS.\n  * `cellTemplate` - Overrides the instance's `CELL_TEMPLATE` for cells in this\n    column only.\n  * `formatter` - Used to customize or override the content value from the\n    Model.  These do not have access to the cell or row Nodes and should\n    return string (HTML) content.\n  * `nodeFormatter` - Used to provide content for a cell as well as perform any\n    custom modifications on the cell or row Node that could not be performed by\n    `formatter`s.  Should be used sparingly for better performance.\n  * `emptyCellValue` - String (HTML) value to use if the Model data for a\n    column, or the content generated by a `formatter`, is the empty string,\n    `null`, or `undefined`.\n  * `allowHTML` - Set to `true` if a column value, `formatter`, or\n    `emptyCellValue` can contain HTML.  This defaults to `false` to protect\n    against XSS.\n  * `className` - Space delimited CSS classes to add to all `<td>`s in a column.\n\nColumn `formatter`s are passed an object (`o`) with the following properties:\n\n  * `value` - The current value of the column's associated attribute, if any.\n  * `data` - An object map of Model keys to their current values.\n  * `record` - The Model instance.\n  * `column` - The column configuration object for the current column.\n  * `className` - Initially empty string to allow `formatter`s to add CSS \n    classes to the cell's `<td>`.\n  * `rowIndex` - The zero-based row number.\n  * `rowClass` - Initially empty string to allow `formatter`s to add CSS\n    classes to the cell's containing row `<tr>`.\n\nThey may return a value or update `o.value` to assign specific HTML content.  A\nreturned value has higher precedence.\n\nColumn `nodeFormatter`s are passed an object (`o`) with the following\nproperties:\n\n  * `value` - The current value of the column's associated attribute, if any.\n  * `td` - The `<td>` Node instance.\n  * `cell` - The `<div>` liner Node instance if present, otherwise, the `<td>`.\n    When adding content to the cell, prefer appending into this property.\n  * `data` - An object map of Model keys to their current values.\n  * `record` - The Model instance.\n  * `column` - The column configuration object for the current column.\n  * `rowIndex` - The zero-based row number.\n\nThey are expected to inject content into the cell's Node directly, including\nany \"empty\" cell content.  Each `nodeFormatter` will have access through the\nNode API to all cells and rows in the `<tbody>`, but not to the `<table>`, as\nit will not be attached yet.\n\nIf a `nodeFormatter` returns `false`, the `o.td` and `o.cell` Nodes will be\n`destroy()`ed to remove them from the Node cache and free up memory.  The DOM\nelements will remain as will any content added to them.  _It is highly\nadvisable to always return `false` from your `nodeFormatter`s_.",
            "extends": "View"
        },
        "datatable-base": {
            "name": "datatable-base",
            "submodules": {},
            "classes": {
                "DataTable.BodyView": 1
            },
            "fors": {},
            "namespaces": {
                "DataTable": 1
            },
            "tag": "module",
            "file": "/Users/lsmith/dev/yui3-gallery/src/gallery-datatable-350-preview/js/datatable.js",
            "line": 2604,
            "description": "A Widget for displaying tabular data.  The base implementation of DataTable\nprovides the ability to dynamically generate an HTML table from a set of column\nconfigurations and row data.\n\nTwo classes are included in the `datatable-base` module:\n\n1. `Y.DataTable` - Main instantiable class, has all loaded features available\n2. `Y.DataTable.Base` - Featureless version for use primarily as a superclass.\n\nExample usage might look like this:\n\n<pre><code>\n// Featureless table, usually used as a subclass, but can be instantiated\nvar table = new Y.DataTable.Base({\n    columns: ['firstName', 'lastName', 'age'],\n    data: [\n        { firstName: 'Frank', lastName: 'Zappa', age: 71 },\n        { firstName: 'Frank', lastName: 'Lloyd Wright', age: 144 },\n        { firstName: 'Albert', lastName: 'Einstein', age: 132 },\n        ...\n    ]\n});\n\ntable.render('#in-here');\n\n// Table with all loaded features available (not .Base)\n// The functionality of this table would require additional modules be use()d,\n// but the feature APIs are aggregated onto Y.DataTable.\n// (Snippet is for illustration. Not all features are available today.)\nvar table = new Y.DataTable({\n    columns: [\n        { type: 'checkbox', defaultChecked: true },\n        { key: 'firstName', sortable: true, resizable: true },\n        { key: 'lastName', sortable: true },\n        { key: 'role', formatter: toRoleName }\n    ],\n    data: {\n        source: 'http://myserver.com/service/json',\n        type: 'json',\n        schema: {\n            resultListLocator: 'results.users',\n            fields: [\n                'username',\n                'firstName',\n                'lastName',\n                { key: 'role', type: 'number' }\n            ]\n        }\n    },\n    recordType: UserModel,\n    pagedData: {\n        location: 'footer',\n        pageSizes: [20, 50, 'all'],\n        rowsPerPage: 20,\n        pageLinks: 5\n    },\n    editable: true,\n    filterable: true\n});\n</code></pre>\n\n### Column Configuration\n\nThe column configurations are set in the form of an array of objects, where\neach object corresponds to a column.  For columns populated directly from the\nrow data, a 'key' property is required to bind the column to that property or\nattribute in the row data.\n\nNot all columns need to relate to row data, nor do all properties or attributes\nof the row data need to have a corresponding column.  However, only those\ncolumns included in the `columns` configuration attribute will be rendered.\n\nOther column configuration properties are supported by the configured\n`headerView`, `bodyView`, `footerView` classes as well as any features added by\nplugins or class extensions.  See the description of DataTable.HeaderView,\nDataTable.BodyView, and other DataTable feature classes to see what column\nproperties they support.\n\nSome examples of column configurations would be:\n\n<pre><code>\n// Basic\nvar columns = [{ key: 'firstName' }, { key: 'lastName' }, { key: 'age' }];\n\n// For columns without any additional configuration, strings can be used\nvar columns = ['firstName', 'lastName', 'age'];\n\n// Multi-row column headers (see DataTable.HeaderView for details)\nvar columns = [\n    {\n        label: 'Name',\n        children: [\n            { key: 'firstName' },\n            { key: 'lastName' }\n        ]\n    },\n    'age' // mixing and matching objects and strings is ok\n];\n\n// Including columns that are not related 1:1 to row data fields/attributes\n// (See DataTable.BodyView for details)\nvar columns = [\n    {\n        label: 'Name', // Needed for the column header\n        formatter: function (o) {\n            // Fill the column cells with data from firstName and lastName\n            if (o.data.age > 55) {\n                o.classnames += ' senior';\n            }\n            return o.data.lastName + ', ' + o.data.firstName;\n        }\n    },\n    'age'\n];\n\n// Columns that include feature configurations (for illustration; not all\n// features are available today).\nvar columns = [\n    { type: 'checkbox', defaultChecked: true },\n    { key: 'firstName', sortable: true, resizable: true, min-width: '300px' },\n    { key: 'lastName', sortable: true, resizable: true, min-width: '300px' },\n    { key: 'age', emptyCellValue: '<em>unknown</em>' }\n];\n</code></pre>\n\n### Row Data Configuration\n\nThe `data` configuration attribute is responsible for housing the data objects that will be rendered as rows.  You can provide this information in two ways by default:\n\n1. An array of simple objects with key:value pairs\n2. A ModelList of Base-based class instances (presumably Model subclass\n   instances)\n\nIf an array of objects is passed, it will be translated into a ModelList filled\nwith instances of the class provided to the `recordType` attribute.  This\nattribute can also create a custom Model subclass from an array of field names\nor an object of attribute configurations.  If no `recordType` is provided, one\nwill be created for you from available information (see `_initRecordType`).\nProviding either your own ModelList instance for `data`, or at least Model\nclass for `recordType`, is the best way to control client-server\nsynchronization when modifying data on the client side.\n\nThe ModelList instance that manages the table's data is available in the `data`\nproperty on the DataTable instance.\n\n\n### Rendering\n\nTable rendering is a collaborative process between the DataTable and its\nconfigured `headerView`, `bodyView`, and `footerView`.  The DataTable renders\nthe `<table>` and `<caption>`, but the contents of the table are delegated to\ninstances of the classes provided to the `headerView`, `bodyView`, and\n`footerView` attributes. If any of these attributes is unset, that portion of\nthe table won't be rendered.\n\nDataTable.Base assigns the default `headerView` to `Y.DataTable.HeaderView` and\nthe default `bodyView` to `Y.DataTable.BodyView`, though either can be\noverridden for custom rendering.  No default `footerView` is assigned. See\nthose classes for more details about how they operate.",
            "itemtype": "main"
        },
        "datatable-mutable": {
            "name": "datatable-mutable",
            "submodules": {},
            "classes": {
                "DataTable.Base": 1,
                "DataTable.Mutable": 1
            },
            "fors": {
                "DataTable": 1
            },
            "namespaces": {},
            "tag": "module",
            "file": "/Users/lsmith/dev/yui3-gallery/src/gallery-datatable-350-preview/js/datatable.js",
            "line": 2876,
            "description": "Adds mutation convenience methods to `Y.DataTable` (or other built class).\n\nColumn mutation methods are paired with new custom events:\n\n * addColumn\n * removeColumn\n * modifyColumn\n * moveColumn\n\nRow mutation events are bubbled from the DataTable's `data` ModelList through\nthe DataTable instance."
        },
        "datatable-message": {
            "name": "datatable-message",
            "submodules": {},
            "classes": {
                "DataTable.Message": 1
            },
            "fors": {
                "DataTable": 1
            },
            "namespaces": {},
            "tag": "module",
            "file": "/Users/lsmith/dev/yui3-gallery/src/gallery-datatable-350-preview/js/datatable.js",
            "line": 3478,
            "description": "Adds support for a message container to appear in the table.  This can be used\nto indicate loading progress, lack of records, or any other communication\nneeded.\n\nFeatures added to `Y.DataTable`, and made available for custom classes at\n`Y.DataTable.Message`."
        },
        "datatable-column-widths": {
            "name": "datatable-column-widths",
            "submodules": {},
            "classes": {
                "DataTable.ColumnWidths": 1
            },
            "fors": {
                "DataTable": 1
            },
            "namespaces": {},
            "tag": "module",
            "file": "/Users/lsmith/dev/yui3-gallery/src/gallery-datatable-350-preview/js/datatable.js",
            "line": 3739,
            "description": "Adds basic, programmatic column width support to DataTable. Note, this does not\nadd support for truncated columns.  Due to the way HTML tables render, column\nwidth is more like `min-width`.  Column content wider than the assigned width\nwill cause the column to expand, though if a table width is set, the overall\nwidth will be respected by reducing the width of other columns if possible.\n\nTo set a column width, either add a `width` value to the column configuration\nor call the `setColumnWidth(id, width)` method.\n\nNote, assigning column widths is possible without this module, as each cell is\ndecorated with a class appropriate for that column which you can statically\ntarget in your site's CSS.  To achieve forced column widths with truncation,\neither add a column `formatter` or update the table's `bodyView`'s\n`CELL_TEMPLATE` to include a `<div>` liner (by convention, assigned a classname\n\"yui3-datatable-liner\"), then set the width and overflow for those `<div>`s in\nyour CSS.  For example, to give the column \"foo\" an absolute width, add this to\nyour site CSS:\n\n<pre><code>\n.yui3-datatable .yui3-datatable-foo .yui3-datatable-liner {\n    overflow: hidden;\n    width: 125px;\n}\n</pre></code>\n\nand assign a `formatter` for the \"foo\" column in your JavaScript:\n\n<pre><code>\nvar table = new Y.DataTable({\n    columns: [\n        {\n            key: 'foo',\n            formatter: '&lt;div class=\"yui3-datatable-liner\">{value}&lt;/div>',\n            allowHTML: true\n        },\n        ...\n    ],\n    ...\n});\n</code></pre>\n\nTo add a liner to all columns, either provide a custom `bodyView` to the\nDataTable constructor or update the default `bodyView`'s `CELL_TEMPLATE` like\nso:\n\n<pre><code>\ntable.on('renderBody', function (e) {\n    e.view.CELL_TEMPLATE = e.view.CELL_TEMPLATE.replace(/\\{content\\}/,\n            '&lt;div class=\"yui3-datatable-liner\">{content}&lt;/div>');\n});\n</code></pre>\n\nKeep in mind that DataTable skins apply cell `padding`, so assign your CSS\n`width`s accordingly or override the `padding` style for that column's `<td>`s\nto 0, and add `padding` to the liner `<div>`'s styles."
        },
        "datatable-scroll": {
            "name": "datatable-scroll",
            "submodules": {},
            "classes": {
                "DataTable.Scrollable": 1
            },
            "fors": {
                "DataTable": 1
            },
            "namespaces": {},
            "tag": "module",
            "file": "/Users/lsmith/dev/yui3-gallery/src/gallery-datatable-350-preview/js/datatable.js",
            "line": 4014,
            "description": "Adds the ability to make the table rows scrollable while preserving the header\nplacement.\n\nThere are two types of scrolling, horizontal (x) and vertical (y).  Horizontal\nscrolling is achieved by wrapping the entire table in a scrollable container.\nVertical scrolling is achieved by splitting the table headers and data into two\nseparate tables, the latter of which is wrapped in a vertically scrolling\ncontainer.  In this case, column widths of header cells and data cells are kept\nin sync programmatically.\n\nSince the split table synchronization can be costly at runtime, the split is only done if the data in the table stretches beyond the configured `height` value.\n\nTo activate or deactivate scrolling, set the `scrollable` attribute to one of\nthe following values:\n\n * `false` - (default) Scrolling is disabled.\n * `true` or 'xy' - If `height` is set, vertical scrolling will be activated, if\n            `width` is set, horizontal scrolling will be activated.\n * 'x' - Activate horizontal scrolling only. Requires the `width` attribute is\n         also set.\n * 'y' - Activate vertical scrolling only. Requires the `height` attribute is\n         also set."
        },
        "datatable-sort": {
            "name": "datatable-sort",
            "submodules": {},
            "classes": {
                "DataTable": 1,
                "DataTable.Sortable": 1
            },
            "fors": {
                "DataTable": 1
            },
            "namespaces": {},
            "tag": "module",
            "file": "/Users/lsmith/dev/yui3-gallery/src/gallery-datatable-350-preview/js/datatable.js",
            "line": 4808,
            "description": "Adds support for sorting the table data by API methods `table.sort(...)` or\n`table.toggleSort(...)` or by clicking on column headers in the rendered UI.\n\nSorting by the API is enabled automatically when this module is `use()`d.  To\nenable UI triggered sorting, set the DataTable's `sortable` attribute to\n`true`.\n\n<pre><code>\nvar table = new Y.DataTable({\n    columns: [ 'id', 'username', 'name', 'birthdate' ],\n    data: [ ... ],\n    sortable: true\n});\n\ntable.render('#table');\n</code></pre>\n\nSetting `sortable` to `true` will enable UI sorting for all columns.  To enable\nUI sorting for certain columns only, set `sortable` to an array of column keys,\nor just add `sortable: true` to the respective column configuration objects.\nThis uses the default setting of `sortable: auto` for the DataTable instance.\n\n<pre><code>\nvar table = new Y.DataTable({\n    columns: [\n        'id',\n        { key: 'username',  sortable: true },\n        { key: 'name',      sortable: true },\n        { key: 'birthdate', sortable: true }\n    ],\n    data: [ ... ]\n    // sortable: 'auto' is the default\n});\n\n// OR\nvar table = new Y.DataTable({\n    columns: [ 'id', 'username', 'name', 'birthdate' ],\n    data: [ ... ],\n    sortable: [ 'username', 'name', 'birthdate' ]\n});\n</code></pre>\n\nTo disable UI sorting for all columns, set `sortable` to `false`.  This still\npermits sorting via the API methods.\n\nAs new records are inserted into the table's `data` ModelList, they will be inserted at the correct index to preserve the sort order.\n\nThe current sort order is stored in the `sortBy` attribute.  Assigning this value at instantiation will automatically sort your data.\n\nSorting is done by a simple value comparison using &lt; and &gt; on the field\nvalue.  If you need custom sorting, add a sort function in the column's\n`sortFn` property.  Columns whose content is generated by formatters, but don't\nrelate to a single `key`, require a `sortFn` to be sortable.\n\n<pre><code>\nfunction nameSort(a, b) {\n    var aa = a.get('lastName'),\n        bb = a.get('lastName');\n\n    if (aa === bb) {\n        aa = a.get('firstName');\n        bb = b.get('firstName');\n    }\n\n    return (aa > bb) ? 1 : (aa < bb) ? -1 : 0;\n}\n\nvar table = new Y.DataTable({\n    columns: [ 'id', 'username', { key: name, sortFn: nameSort }, 'birthdate' ],\n    data: [ ... ],\n    sortable: [ 'username', 'name', 'birthdate' ]\n});\n</code></pre>\n\nSee the user guide for more details."
        },
        "gallery-jsonp": {
            "name": "gallery-jsonp",
            "submodules": {},
            "classes": {
                "JSONPRequest": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "/Users/lsmith/dev/yui3-gallery/src/gallery-jsonp/js/jsonp.js",
            "line": 4,
            "description": "<p>Provides a JSONPRequest class for repeated JSONP calls, and a convenience\nmethod Y.jsonp(url, callback) to instantiate and send a JSONP request.</p>\n\n<p>The callback for the response can be named in the url explicitly or\nprovided in the configuration (second parameter to the constructor).\n\n<p>By default, the query parameter string &quot;callback=???&quot; will be\nsearched for in the url (??? can be anything).  If it's not found, it will\nbe added on.  If the JSONP service uses a different parameter name or url\nformat, you can override this behavior with the <code>format</code> property\nin the callback config.</p>\n\n<p>The second parameter can be a callback function that accepts the JSON\npayload as its argument, or a configuration object supporting the keys:</p>\n<ul>\n  <li>on - map of callback subscribers\n     <ul>\n        <li>success - function handler for successful transmission</li>\n        <li>failure - function handler for failed transmission</li>\n        <li>timeout - function handler for transactions that timeout</li>\n     </ul>\n </li>\n <li>format  - override function for inserting the proxy name in the url</li>\n <li>timeout - the number of milliseconds to wait before giving up</li>\n <li>context - becomes <code>this</code> in the callbacks</li>\n <li>args    - array of subsequent parameters to pass to the callbacks</li>\n</ul>",
            "is_constructor": 1,
            "params": [
                {
                    "name": "url",
                    "description": "the url of the JSONP service",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "the default callback configuration or\n                                  success handler",
                    "type": "Object|Function"
                }
            ]
        },
        "gallery-torelativetime": {
            "name": "gallery-torelativetime",
            "submodules": {},
            "classes": {
                "YUI~toRelativeTime": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "/Users/lsmith/dev/yui3-gallery/src/gallery-torelativetime/js/torelativetime.js",
            "line": 1,
            "description": "Provides a method Y.toRelativeTime(Date, refDate) to translate a Date\ninstance to a string like \"2 days ago\".  If the second parameter is\nprovided, the time delta is in reference to this date."
        },
        "dataschema": {
            "name": "dataschema",
            "submodules": {
                "dataschema-class": 1
            },
            "classes": {
                "DataSchema": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "/Users/lsmith/dev/yui3-gallery/src/gallery-dataschema-class/js/dataschema-class.js",
            "line": 5,
            "description": "Abstract class encapsulation for any DataSchema implementation.  Pass the\nconstructor configuration an object containing these keys:\n\n<ul>\n  <li><code>type</code> - \"json\", \"JSON\", Y.DataSchema.JSON, a custom\n      implementation object (must provide an apply method), or a custom\n      function used as the apply method.</li>\n  <li><code>schema</code> - the object containing the appropriate schema\n      key:values for the specified type of schema parser.  What you would\n      pass as the first argument to\n      Y.DataSchema.JSON.apply( SCHEMA, data );</li>\n</ul>\n\nThis class constructor replaces the Y.DataSchema object namespace.  All\nloaded schema parser implementations are preserved."
        },
        "dataschema-class": {
            "name": "dataschema-class",
            "submodules": {},
            "classes": {
                "DataSchema": 1
            },
            "fors": {},
            "is_submodule": 1,
            "namespaces": {},
            "module": "dataschema",
            "namespace": "",
            "file": "/Users/lsmith/dev/yui3-gallery/src/gallery-dataschema-class/js/dataschema-class.js",
            "line": 5,
            "description": "Abstract class encapsulation for any DataSchema implementation.  Pass the\nconstructor configuration an object containing these keys:\n\n<ul>\n  <li><code>type</code> - \"json\", \"JSON\", Y.DataSchema.JSON, a custom\n      implementation object (must provide an apply method), or a custom\n      function used as the apply method.</li>\n  <li><code>schema</code> - the object containing the appropriate schema\n      key:values for the specified type of schema parser.  What you would\n      pass as the first argument to\n      Y.DataSchema.JSON.apply( SCHEMA, data );</li>\n</ul>\n\nThis class constructor replaces the Y.DataSchema object namespace.  All\nloaded schema parser implementations are preserved.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "config",
                    "description": "object containing keys \"type\" and \"schema\"",
                    "type": "Object"
                }
            ]
        },
        "gallery-pluginattr": {
            "name": "gallery-pluginattr",
            "submodules": {},
            "classes": {
                "Plugin": 1
            },
            "fors": {
                "Plugin": 1
            },
            "namespaces": {},
            "tag": "module",
            "file": "/Users/lsmith/dev/yui3-gallery/src/gallery-pluginattr/js/attr.js",
            "line": 1,
            "description": "Adds a static method `Y.Plugin.addHostAttr(...)` to allow plugging and\nunplugging to happen via host attribute configuration."
        },
        "event-konami": {
            "name": "event-konami",
            "submodules": {},
            "classes": {
                "YUI~event-konami": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "/Users/lsmith/dev/yui3-gallery/src/gallery-event-konami/js/konami.js",
            "line": 1,
            "description": "Based on the Konami code (http://en.wikipedia.org/wiki/Konami_Code).\nSubscribers to this event should do something special.  The event will be\nfired only once for each subscriber.  With great power comes great\nresponsibility, after all."
        },
        "event-drag": {
            "name": "event-drag",
            "submodules": {},
            "classes": {
                "YUI~event-drag": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "/Users/lsmith/dev/yui3-gallery/src/gallery-event-drag/js/event-drag.js",
            "line": 1,
            "description": "<p>Provides subscribable drag events from Node or NodeLists.  Subscribing\nto any of the events causes the node to be plugged with Y.Plugin.Drag.  The\nconfig object passed can be used to set Drag instance attributes or add\nadditional Plugins to the Drag instance such as Y.Plugin.DDProxy.</p>\n\nConfig properties are formatted and tested for a corresponding Y.Plugin.* as\n'somePlugin' => Y.Plugin.DDSomePlugin if the property name doesn't already\nstart with \"DD\".  So { proxy: true } and { DDProxy: true } are functionally\nequivalent.  Both add Y.Plugin.DDProxy to the Drag instance.</p>\n\n<pre><code>node.on('drag:start', fn, { proxy: true, data: 123 });</code></pre>\n\n<p>This adds Y.Plugin.DDProxy to the Drag instance and also set's the Drag instance's data attribute.</p>\n\n<p>Passing any value will result in the Plugin being added, but if you pass\nan object literal as the value, it will be sent to the Plugin's\nconstructor.</p>\n\n<pre><code>node.on('drag:end', fn, {\n    constrained: { constrain2node: '#container' }\n});</code></pre>\n\n<p>This adds Y.Plugin.DDConstrained to the Drag instance using the specified\nconfiguration.</p>\n\n<p>A custom detach handle is returned, whose detach method unplugs the\nY.Plugin.Drag from the node(s).</p>\n\n<p>Supported events are:</p>\n<ul>\n  <li>drag or drag:drag</li>\n  <li>drag:start</li>\n  <li>drag:end</li>\n  <li>drag:mouseDown</li>\n  <li>drag:afterMouseDown</li>\n  <li>drag:removeHandle</li>\n  <li>drag:addHandle</li>\n  <li>drag:removeInvalid</li>\n  <li>drag:addInvalid</li>\n  <li>drag:align</li>\n</ul>\n\n<p>Additionally, the default callback context is overridden to the\nsubscribing Node unless otherwise specified during the subscription.\nSo &quot;this&quot; in the callback will refer to the node.  On the\nevent object passed to subscribers, <code>e.currentTarget</code> is also the\nNode regardless of context override.  The Drag instance is available from\nthe Node as <code>node.dd</code>.</p>"
        }
    },
    "classes": {
        "DataTable.Core": {
            "name": "DataTable.Core",
            "shortname": "DataTable.Core",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [
                "DataTable.Base"
            ],
            "module": "datatable-head",
            "namespace": "",
            "file": "/Users/lsmith/dev/yui3-gallery/src/gallery-datatable-350-preview/js/datatable.js",
            "line": 46,
            "description": "Class extension providing the core API and structure for the DataTable Widget."
        },
        "DataTable.HeaderView": {
            "name": "DataTable.HeaderView",
            "shortname": "HeaderView",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "datatable-body",
            "namespace": "DataTable",
            "file": "/Users/lsmith/dev/yui3-gallery/src/gallery-datatable-350-preview/js/datatable.js",
            "line": 1424,
            "description": "View class responsible for rendering the `<thead>` section of a table. Used as\nthe default `headerView` for `Y.DataTable.Base` and `Y.DataTable` classes.\n\nTranslates the provided array of column configuration objects into a rendered\n`<thead>` based on the data in those objects.\n    \n\nThe structure of the column data is expected to be a single array of objects,\nwhere each object corresponds to a `<th>`.  Those objects may contain a\n`children` property containing a similarly structured array to indicate the\nnested cells should be grouped under the parent column's colspan in a separate\nrow of header cells. E.g.\n\n<pre><code>\nnew Y.DataTable.HeaderView({\n  container: tableNode,\n  columns: [\n    { key: 'id' }, // no nesting\n    { key: 'name', children: [\n      { key: 'firstName', label: 'First' },\n      { key: 'lastName',  label: 'Last' } ] }\n  ]\n}).render();\n</code></pre>\n\nThis would translate to the following visualization:\n\n<pre>\n---------------------\n|    |     name     |\n|    |---------------\n| id | First | Last |\n---------------------\n</pre>\n\nSupported properties of the column objects include:\n\n  * `label`     - The HTML content of the header cell.\n  * `key`       - If `label` is not specified, the `key` is used for content.\n  * `children`  - Array of columns to appear below this column in the next\n                  row.\n  * `headerTemplate` - Overrides the instance's `CELL_TEMPLATE` for cells in this\n    column only.\n  * `abbr`      - The content of the 'abbr' attribute of the `<th>`\n  * `className` - Adds this string of CSS classes to the column header\n\nThrough the life of instantiation and rendering, the column objects will have\nthe following properties added to them:\n\n  * `_colspan` - To supply the `<th>` attribute\n  * `_rowspan` - To supply the `<th>` attribute\n  * `_parent`  - If the column is a child of another column, this points to\n    its parent column\n  * `_yuid`    - (Added by DataTable) A unique YUI generated id used as the\n    `<th>`'s 'id' for reference in the data `<td>`'s 'headers' attribute.\n\nThe column object is also used to provide values for {placeholder} tokens in the\ninstance's `CELL_TEMPLATE`, so you can modify the template and include other\ncolumn object properties to populate them."
        },
        "DataTable.BodyView": {
            "name": "DataTable.BodyView",
            "shortname": "BodyView",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "datatable-base",
            "namespace": "DataTable",
            "file": "/Users/lsmith/dev/yui3-gallery/src/gallery-datatable-350-preview/js/datatable.js",
            "line": 1893,
            "description": "View class responsible for rendering the `<tbody>` section of a table. Used as\nthe default `bodyView` for `Y.DataTable.Base` and `Y.DataTable` classes.\n\nTranslates the provided `modelList` into a rendered `<tbody>` based on the data\nin the constituent Models, altered or ammended by any special column\nconfigurations.\n\nThe `columns` configuration, passed to the constructor, determines which\ncolumns will be rendered.\n\nThe rendering process involves constructing an HTML template for a complete row\nof data, built by concatenating a customized copy of the instance's\n`CELL_TEMPLATE` into the `ROW_TEMPLATE` once for each column.  This template is\nthen populated with values from each Model in the `modelList`, aggregating a\ncomplete HTML string of all row and column data.  A `<tbody>` Node is then created from the markup and any column `nodeFormatter`s are applied.\n\nSupported properties of the column objects include:\n\n  * `key` - Used to link a column to an attribute in a Model.\n  * `name` - Used for columns that don't relate to an attribute in the Model\n    (`formatter` or `nodeFormatter` only) if the implementer wants a\n    predictable name to refer to in their CSS.\n  * `cellTemplate` - Overrides the instance's `CELL_TEMPLATE` for cells in this\n    column only.\n  * `formatter` - Used to customize or override the content value from the\n    Model.  These do not have access to the cell or row Nodes and should\n    return string (HTML) content.\n  * `nodeFormatter` - Used to provide content for a cell as well as perform any\n    custom modifications on the cell or row Node that could not be performed by\n    `formatter`s.  Should be used sparingly for better performance.\n  * `emptyCellValue` - String (HTML) value to use if the Model data for a\n    column, or the content generated by a `formatter`, is the empty string,\n    `null`, or `undefined`.\n  * `allowHTML` - Set to `true` if a column value, `formatter`, or\n    `emptyCellValue` can contain HTML.  This defaults to `false` to protect\n    against XSS.\n  * `className` - Space delimited CSS classes to add to all `<td>`s in a column.\n\nColumn `formatter`s are passed an object (`o`) with the following properties:\n\n  * `value` - The current value of the column's associated attribute, if any.\n  * `data` - An object map of Model keys to their current values.\n  * `record` - The Model instance.\n  * `column` - The column configuration object for the current column.\n  * `className` - Initially empty string to allow `formatter`s to add CSS \n    classes to the cell's `<td>`.\n  * `rowIndex` - The zero-based row number.\n  * `rowClass` - Initially empty string to allow `formatter`s to add CSS\n    classes to the cell's containing row `<tr>`.\n\nThey may return a value or update `o.value` to assign specific HTML content.  A\nreturned value has higher precedence.\n\nColumn `nodeFormatter`s are passed an object (`o`) with the following\nproperties:\n\n  * `value` - The current value of the column's associated attribute, if any.\n  * `td` - The `<td>` Node instance.\n  * `cell` - The `<div>` liner Node instance if present, otherwise, the `<td>`.\n    When adding content to the cell, prefer appending into this property.\n  * `data` - An object map of Model keys to their current values.\n  * `record` - The Model instance.\n  * `column` - The column configuration object for the current column.\n  * `rowIndex` - The zero-based row number.\n\nThey are expected to inject content into the cell's Node directly, including\nany \"empty\" cell content.  Each `nodeFormatter` will have access through the\nNode API to all cells and rows in the `<tbody>`, but not to the `<table>`, as\nit will not be attached yet.\n\nIf a `nodeFormatter` returns `false`, the `o.td` and `o.cell` Nodes will be\n`destroy()`ed to remove them from the Node cache and free up memory.  The DOM\nelements will remain as will any content added to them.  _It is highly\nadvisable to always return `false` from your `nodeFormatter`s_."
        },
        "DataTable": {
            "name": "DataTable",
            "shortname": "DataTable",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "datatable-sort",
            "namespace": "",
            "file": "/Users/lsmith/dev/yui3-gallery/src/gallery-datatable-350-preview/js/datatable.js",
            "line": 2770,
            "description": "A Widget for displaying tabular data.  Before feature modules are `use()`d,\nthis class is functionally equivalent to DataTable.Base.  However, feature\nmodules can modify this class in non-destructive ways, expanding the API and\nfunctionality.\n\nThis is the primary DataTable class.  Out of the box, it provides the ability\nto dynamically generate an HTML table from a set of column configurations and\nrow data.  But feature module inclusion can add table sorting, pagintaion,\nhighlighting, selection, and more.\n\n<pre><code>\n// Basic use\nvar table = new Y.DataTable({\n    columns: ['firstName', 'lastName', 'age'],\n    data: [\n        { firstName: 'Frank', lastName: 'Zappa', age: 71 },\n        { firstName: 'Frank', lastName: 'Lloyd Wright', age: 144 },\n        { firstName: 'Albert', lastName: 'Einstein', age: 132 },\n        ...\n    ]\n});\n\ntable.render('#in-here');\n\n// Table with loaded features.\n// The functionality of this table would require additional modules be use()d,\n// but the feature APIs are aggregated onto Y.DataTable.\n// (Snippet is for illustration. Not all features are available today.)\nvar table = new Y.DataTable({\n    columns: [\n        { type: 'checkbox', defaultChecked: true },\n        { key: 'firstName', sortable: true, resizable: true },\n        { key: 'lastName', sortable: true },\n        { key: 'role', formatter: toRoleName }\n    ],\n    data: {\n        source: 'http://myserver.com/service/json',\n        type: 'json',\n        schema: {\n            resultListLocator: 'results.users',\n            fields: [\n                'username',\n                'firstName',\n                'lastName',\n                { key: 'role', type: 'number' }\n            ]\n        }\n    },\n    recordType: UserModel,\n    pagedData: {\n        location: 'footer',\n        pageSizes: [20, 50, 'all'],\n        rowsPerPage: 20,\n        pageLinks: 5\n    },\n    editable: true,\n    filterable: true\n});\n</code></pre>",
            "extends": "DataTable.Base"
        },
        "DataTable.Base": {
            "name": "DataTable.Base",
            "shortname": "Base",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "datatable-mutable",
            "namespace": "DataTable",
            "file": "/Users/lsmith/dev/yui3-gallery/src/gallery-datatable-350-preview/js/datatable.js",
            "line": 2836,
            "description": "The baseline implementation of a DataTable.  This class should be used\nprimarily as a superclass for a custom DataTable with a specific set of\nfeatures.  Because features can be composed onto `Y.DataTable`, custom\nsubclasses of DataTable.Base will remain unmodified when new feature modules\nare loaded.\n\nDataTable.Base is built from DataTable.Core, and sets the default `headerView`\nto `Y.DataTable.HeaderView` and default `bodyView` to `Y.DataTable.BodyView`.",
            "extends": "Widget",
            "uses": [
                "DataTable.Core"
            ]
        },
        "DataTable.Mutable": {
            "name": "DataTable.Mutable",
            "shortname": "DataTable.Mutable",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "datatable-mutable",
            "namespace": "",
            "file": "/Users/lsmith/dev/yui3-gallery/src/gallery-datatable-350-preview/js/datatable.js",
            "line": 2876,
            "description": "Adds mutation convenience methods to `Y.DataTable` (or other built class).\n\nColumn mutation methods are paired with new custom events:\n\n * addColumn\n * removeColumn\n * modifyColumn\n * moveColumn\n\nRow mutation events are bubbled from the DataTable's `data` ModelList through\nthe DataTable instance."
        },
        "DataTable.Message": {
            "name": "DataTable.Message",
            "shortname": "DataTable.Message",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "datatable-message",
            "namespace": "",
            "file": "/Users/lsmith/dev/yui3-gallery/src/gallery-datatable-350-preview/js/datatable.js",
            "line": 3478,
            "description": "Adds support for a message container to appear in the table.  This can be used\nto indicate loading progress, lack of records, or any other communication\nneeded.\n\nFeatures added to `Y.DataTable`, and made available for custom classes at\n`Y.DataTable.Message`."
        },
        "DataTable.ColumnWidths": {
            "name": "DataTable.ColumnWidths",
            "shortname": "DataTable.ColumnWidths",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "datatable-column-widths",
            "namespace": "",
            "file": "/Users/lsmith/dev/yui3-gallery/src/gallery-datatable-350-preview/js/datatable.js",
            "line": 3739,
            "description": "Adds basic, programmatic column width support to DataTable. Note, this does not\nadd support for truncated columns.  Due to the way HTML tables render, column\nwidth is more like `min-width`.  Column content wider than the assigned width\nwill cause the column to expand, though if a table width is set, the overall\nwidth will be respected by reducing the width of other columns if possible.\n\nTo set a column width, either add a `width` value to the column configuration\nor call the `setColumnWidth(id, width)` method.\n\nNote, assigning column widths is possible without this module, as each cell is\ndecorated with a class appropriate for that column which you can statically\ntarget in your site's CSS.  To achieve forced column widths with truncation,\neither add a column `formatter` or update the table's `bodyView`'s\n`CELL_TEMPLATE` to include a `<div>` liner (by convention, assigned a classname\n\"yui3-datatable-liner\"), then set the width and overflow for those `<div>`s in\nyour CSS.  For example, to give the column \"foo\" an absolute width, add this to\nyour site CSS:\n\n<pre><code>\n.yui3-datatable .yui3-datatable-foo .yui3-datatable-liner {\n    overflow: hidden;\n    width: 125px;\n}\n</pre></code>\n\nand assign a `formatter` for the \"foo\" column in your JavaScript:\n\n<pre><code>\nvar table = new Y.DataTable({\n    columns: [\n        {\n            key: 'foo',\n            formatter: '&lt;div class=\"yui3-datatable-liner\">{value}&lt;/div>',\n            allowHTML: true\n        },\n        ...\n    ],\n    ...\n});\n</code></pre>\n\nTo add a liner to all columns, either provide a custom `bodyView` to the\nDataTable constructor or update the default `bodyView`'s `CELL_TEMPLATE` like\nso:\n\n<pre><code>\ntable.on('renderBody', function (e) {\n    e.view.CELL_TEMPLATE = e.view.CELL_TEMPLATE.replace(/\\{content\\}/,\n            '&lt;div class=\"yui3-datatable-liner\">{content}&lt;/div>');\n});\n</code></pre>\n\nKeep in mind that DataTable skins apply cell `padding`, so assign your CSS\n`width`s accordingly or override the `padding` style for that column's `<td>`s\nto 0, and add `padding` to the liner `<div>`'s styles."
        },
        "DataTable.Scrollable": {
            "name": "DataTable.Scrollable",
            "shortname": "DataTable.Scrollable",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "datatable-scroll",
            "namespace": "",
            "file": "/Users/lsmith/dev/yui3-gallery/src/gallery-datatable-350-preview/js/datatable.js",
            "line": 4014,
            "description": "Adds the ability to make the table rows scrollable while preserving the header\nplacement.\n\nThere are two types of scrolling, horizontal (x) and vertical (y).  Horizontal\nscrolling is achieved by wrapping the entire table in a scrollable container.\nVertical scrolling is achieved by splitting the table headers and data into two\nseparate tables, the latter of which is wrapped in a vertically scrolling\ncontainer.  In this case, column widths of header cells and data cells are kept\nin sync programmatically.\n\nSince the split table synchronization can be costly at runtime, the split is only done if the data in the table stretches beyond the configured `height` value.\n\nTo activate or deactivate scrolling, set the `scrollable` attribute to one of\nthe following values:\n\n * `false` - (default) Scrolling is disabled.\n * `true` or 'xy' - If `height` is set, vertical scrolling will be activated, if\n            `width` is set, horizontal scrolling will be activated.\n * 'x' - Activate horizontal scrolling only. Requires the `width` attribute is\n         also set.\n * 'y' - Activate vertical scrolling only. Requires the `height` attribute is\n         also set."
        },
        "DataTable.Sortable": {
            "name": "DataTable.Sortable",
            "shortname": "DataTable.Sortable",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "datatable-sort",
            "namespace": "",
            "file": "/Users/lsmith/dev/yui3-gallery/src/gallery-datatable-350-preview/js/datatable.js",
            "line": 4808,
            "description": "Adds support for sorting the table data by API methods `table.sort(...)` or\n`table.toggleSort(...)` or by clicking on column headers in the rendered UI.\n\nSorting by the API is enabled automatically when this module is `use()`d.  To\nenable UI triggered sorting, set the DataTable's `sortable` attribute to\n`true`.\n\n<pre><code>\nvar table = new Y.DataTable({\n    columns: [ 'id', 'username', 'name', 'birthdate' ],\n    data: [ ... ],\n    sortable: true\n});\n\ntable.render('#table');\n</code></pre>\n\nSetting `sortable` to `true` will enable UI sorting for all columns.  To enable\nUI sorting for certain columns only, set `sortable` to an array of column keys,\nor just add `sortable: true` to the respective column configuration objects.\nThis uses the default setting of `sortable: auto` for the DataTable instance.\n\n<pre><code>\nvar table = new Y.DataTable({\n    columns: [\n        'id',\n        { key: 'username',  sortable: true },\n        { key: 'name',      sortable: true },\n        { key: 'birthdate', sortable: true }\n    ],\n    data: [ ... ]\n    // sortable: 'auto' is the default\n});\n\n// OR\nvar table = new Y.DataTable({\n    columns: [ 'id', 'username', 'name', 'birthdate' ],\n    data: [ ... ],\n    sortable: [ 'username', 'name', 'birthdate' ]\n});\n</code></pre>\n\nTo disable UI sorting for all columns, set `sortable` to `false`.  This still\npermits sorting via the API methods.\n\nAs new records are inserted into the table's `data` ModelList, they will be inserted at the correct index to preserve the sort order.\n\nThe current sort order is stored in the `sortBy` attribute.  Assigning this value at instantiation will automatically sort your data.\n\nSorting is done by a simple value comparison using &lt; and &gt; on the field\nvalue.  If you need custom sorting, add a sort function in the column's\n`sortFn` property.  Columns whose content is generated by formatters, but don't\nrelate to a single `key`, require a `sortFn` to be sortable.\n\n<pre><code>\nfunction nameSort(a, b) {\n    var aa = a.get('lastName'),\n        bb = a.get('lastName');\n\n    if (aa === bb) {\n        aa = a.get('firstName');\n        bb = b.get('firstName');\n    }\n\n    return (aa > bb) ? 1 : (aa < bb) ? -1 : 0;\n}\n\nvar table = new Y.DataTable({\n    columns: [ 'id', 'username', { key: name, sortFn: nameSort }, 'birthdate' ],\n    data: [ ... ],\n    sortable: [ 'username', 'name', 'birthdate' ]\n});\n</code></pre>\n\nSee the user guide for more details."
        },
        "JSONPRequest": {
            "name": "JSONPRequest",
            "shortname": "JSONPRequest",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "gallery-jsonp",
            "namespace": "",
            "file": "/Users/lsmith/dev/yui3-gallery/src/gallery-jsonp/js/jsonp.js",
            "line": 4,
            "description": "<p>Provides a JSONPRequest class for repeated JSONP calls, and a convenience\nmethod Y.jsonp(url, callback) to instantiate and send a JSONP request.</p>\n\n<p>The callback for the response can be named in the url explicitly or\nprovided in the configuration (second parameter to the constructor).\n\n<p>By default, the query parameter string &quot;callback=???&quot; will be\nsearched for in the url (??? can be anything).  If it's not found, it will\nbe added on.  If the JSONP service uses a different parameter name or url\nformat, you can override this behavior with the <code>format</code> property\nin the callback config.</p>\n\n<p>The second parameter can be a callback function that accepts the JSON\npayload as its argument, or a configuration object supporting the keys:</p>\n<ul>\n  <li>on - map of callback subscribers\n     <ul>\n        <li>success - function handler for successful transmission</li>\n        <li>failure - function handler for failed transmission</li>\n        <li>timeout - function handler for transactions that timeout</li>\n     </ul>\n </li>\n <li>format  - override function for inserting the proxy name in the url</li>\n <li>timeout - the number of milliseconds to wait before giving up</li>\n <li>context - becomes <code>this</code> in the callbacks</li>\n <li>args    - array of subsequent parameters to pass to the callbacks</li>\n</ul>"
        },
        "YUI~toRelativeTime": {
            "name": "YUI~toRelativeTime",
            "shortname": "YUI~toRelativeTime",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "gallery-torelativetime",
            "namespace": "",
            "file": "/Users/lsmith/dev/yui3-gallery/src/gallery-torelativetime/js/torelativetime.js",
            "line": 1,
            "description": "Provides a method Y.toRelativeTime(Date, refDate) to translate a Date\ninstance to a string like \"2 days ago\".  If the second parameter is\nprovided, the time delta is in reference to this date."
        },
        "DataSchema": {
            "name": "DataSchema",
            "shortname": "DataSchema",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "dataschema",
            "submodule": "dataschema-class",
            "namespace": "",
            "file": "/Users/lsmith/dev/yui3-gallery/src/gallery-dataschema-class/js/dataschema-class.js",
            "line": 5,
            "description": "Abstract class encapsulation for any DataSchema implementation.  Pass the\nconstructor configuration an object containing these keys:\n\n<ul>\n  <li><code>type</code> - \"json\", \"JSON\", Y.DataSchema.JSON, a custom\n      implementation object (must provide an apply method), or a custom\n      function used as the apply method.</li>\n  <li><code>schema</code> - the object containing the appropriate schema\n      key:values for the specified type of schema parser.  What you would\n      pass as the first argument to\n      Y.DataSchema.JSON.apply( SCHEMA, data );</li>\n</ul>\n\nThis class constructor replaces the Y.DataSchema object namespace.  All\nloaded schema parser implementations are preserved."
        },
        "Plugin": {
            "name": "Plugin",
            "shortname": "Plugin",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "gallery-pluginattr",
            "namespace": ""
        },
        "YUI~event-konami": {
            "name": "YUI~event-konami",
            "shortname": "YUI~event-konami",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "event-konami",
            "namespace": "",
            "file": "/Users/lsmith/dev/yui3-gallery/src/gallery-event-konami/js/konami.js",
            "line": 1,
            "description": "Based on the Konami code (http://en.wikipedia.org/wiki/Konami_Code).\nSubscribers to this event should do something special.  The event will be\nfired only once for each subscriber.  With great power comes great\nresponsibility, after all."
        },
        "YUI~event-drag": {
            "name": "YUI~event-drag",
            "shortname": "YUI~event-drag",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "event-drag",
            "namespace": "",
            "file": "/Users/lsmith/dev/yui3-gallery/src/gallery-event-drag/js/event-drag.js",
            "line": 1,
            "description": "<p>Provides subscribable drag events from Node or NodeLists.  Subscribing\nto any of the events causes the node to be plugged with Y.Plugin.Drag.  The\nconfig object passed can be used to set Drag instance attributes or add\nadditional Plugins to the Drag instance such as Y.Plugin.DDProxy.</p>\n\nConfig properties are formatted and tested for a corresponding Y.Plugin.* as\n'somePlugin' => Y.Plugin.DDSomePlugin if the property name doesn't already\nstart with \"DD\".  So { proxy: true } and { DDProxy: true } are functionally\nequivalent.  Both add Y.Plugin.DDProxy to the Drag instance.</p>\n\n<pre><code>node.on('drag:start', fn, { proxy: true, data: 123 });</code></pre>\n\n<p>This adds Y.Plugin.DDProxy to the Drag instance and also set's the Drag instance's data attribute.</p>\n\n<p>Passing any value will result in the Plugin being added, but if you pass\nan object literal as the value, it will be sent to the Plugin's\nconstructor.</p>\n\n<pre><code>node.on('drag:end', fn, {\n    constrained: { constrain2node: '#container' }\n});</code></pre>\n\n<p>This adds Y.Plugin.DDConstrained to the Drag instance using the specified\nconfiguration.</p>\n\n<p>A custom detach handle is returned, whose detach method unplugs the\nY.Plugin.Drag from the node(s).</p>\n\n<p>Supported events are:</p>\n<ul>\n  <li>drag or drag:drag</li>\n  <li>drag:start</li>\n  <li>drag:end</li>\n  <li>drag:mouseDown</li>\n  <li>drag:afterMouseDown</li>\n  <li>drag:removeHandle</li>\n  <li>drag:addHandle</li>\n  <li>drag:removeInvalid</li>\n  <li>drag:addInvalid</li>\n  <li>drag:align</li>\n</ul>\n\n<p>Additionally, the default callback context is overridden to the\nsubscribing Node unless otherwise specified during the subscription.\nSo &quot;this&quot; in the callback will refer to the node.  On the\nevent object passed to subscribers, <code>e.currentTarget</code> is also the\nNode regardless of context override.  The Drag instance is available from\nthe Node as <code>node.dd</code>.</p>"
        }
    },
    "classitems": [
        {
            "file": "/Users/lsmith/dev/yui3-gallery/src/gallery-datatable-350-preview/js/datatable.js",
            "line": 54,
            "description": "Columns to include in the rendered table.\n\nIf omitted, the attributes on the configured `recordType` or the first item\nin the `data` collection will be used as a source.\n\nThis attribute takes an array of strings or objects (mixing the two is\nfine).  Each string or object is considered a column to be rendered.\nStrings are converted to objects, so `columns: ['first', 'last']` becomes\n`columns: [{ key: 'first' }, { key: 'last' }]`.\n\nDataTable.Core only concerns itself with the `key` property of columns.\nAll other properties are for use by the `headerView`, `bodyView`,\n`footerView`, and any class extensions or plugins on the final class or\ninstance. See the descriptions of the view classes and feature class\nextensions and plugins for details on the specific properties they read or\nadd to column definitions.",
            "itemtype": "attribute",
            "name": "columns",
            "type": "{Object[]|String[]}",
            "default": "(from `recordType` ATTRS or first item in the `data`)",
            "class": "DataTable.Core",
            "module": "datatable-core"
        },
        {
            "file": "/Users/lsmith/dev/yui3-gallery/src/gallery-datatable-350-preview/js/datatable.js",
            "line": 82,
            "description": "Model subclass to use as the `model` for the ModelList stored in the `data`\nattribute.\n\nIf not provided, it will try really hard to figure out what to use.  The\nfollowing attempts will be made to set a default value:\n\n1. If the `data` attribute is set with a ModelList instance and its `model`\n   property is set, that will be used.\n2. If the `data` attribute is set with a ModelList instance, and its\n   `model` property is unset, but it is populated, the `ATTRS` of the\n   `constructor of the first item will be used.\n3. If the `data` attribute is set with a non-empty array, a Model subclass\n   will be generated using the keys of the first item as its `ATTRS` (see\n   the `_createRecordClass` method).\n4. If the `columns` attribute is set, a Model subclass will be generated\n   using the columns defined with a `key`. This is least desirable because\n   columns can be duplicated or nested in a way that's not parsable.\n5. If neither `data` nor `columns` is set or populated, a change event\n   subscriber will listen for the first to be changed and try all over\n   again.",
            "itemtype": "attribute",
            "name": "recordType",
            "type": "{Function}",
            "default": "(see description)",
            "class": "DataTable.Core",
            "module": "datatable-core"
        },
        {
            "file": "/Users/lsmith/dev/yui3-gallery/src/gallery-datatable-350-preview/js/datatable.js",
            "line": 113,
            "description": "The collection of data records to display.  This attribute is a pass\nthrough to a `data` property, which is a ModelList instance.\n\nIf this attribute is passed a ModelList or subclass, it will be assigned to\nthe property directly.  If an array of objects is passed, a new ModelList\nwill be created using the configured `recordType` as its `model` property\nand seeded with the array.\n\nRetrieving this attribute will return the ModelList stored in the `data`\nproperty.",
            "itemtype": "attribute",
            "name": "data",
            "type": "{ModelList|Object[]}",
            "default": "`new ModelList()`",
            "class": "DataTable.Core",
            "module": "datatable-core"
        },
        {
            "file": "/Users/lsmith/dev/yui3-gallery/src/gallery-datatable-350-preview/js/datatable.js",
            "line": 135,
            "description": "The class or object to use for rendering the `<thead>` and column headers\nfor the table.  This attribute is responsible for populating the the\ninstance's `head` property.\n\nIf a class constructor (function) is passed, an instance of that clas will\nbe created at `render()` time and assigned to `this.head`.  If an object is\npassed, `head` will be set immediately.\n\nValid objects or classes will have a `render()` method, though it is\nrecommended that they be subclasses of `Y.Base` or `Y.View`.  If the object\nor class supports events, its `addTarget()` method will be called to bubble\nits events to this instance.\n\nThe core implementaion does not define a default `headerView`.  Classes\nbuilt from this extension should define a default.",
            "itemtype": "attribute",
            "name": "headerView",
            "type": "{Function|Object}",
            "class": "DataTable.Core",
            "module": "datatable-core"
        },
        {
            "file": "/Users/lsmith/dev/yui3-gallery/src/gallery-datatable-350-preview/js/datatable.js",
            "line": 160,
            "description": "The class or object to use for rendering the `<tfoot>` and any relevant\ncontent for it.  This attribute is responsible for populating the the\ninstance's `foot` property.\n\nIf a class constructor (function) is passed, an instance of that clas will\nbe created at `render()` time and assigned to `this.foot`.  If an object is\npassed, `foot` will be set immediately.\n\nValid objects or classes will have a `render()` method, though it is\nrecommended that they be subclasses of `Y.Base` or `Y.View`.  If the object\nor class supports events, its `addTarget()` method will be called to bubble\nits events to this instance.\n\nThe core implementaion does not define a default `footerView`.  Classes\nbuilt from this extension should define a default if appropriate.",
            "itemtype": "attribute",
            "name": "footerView",
            "type": "{Function|Object}",
            "class": "DataTable.Core",
            "module": "datatable-core"
        },
        {
            "file": "/Users/lsmith/dev/yui3-gallery/src/gallery-datatable-350-preview/js/datatable.js",
            "line": 185,
            "description": "The class or object to use for rendering the `<tbody>` or `<tbody>`s and\nall data row content for the table.  This attribute is responsible for\npopulating the the instance's `body` property.\n\nIf a class constructor (function) is passed, an instance of that clas will\nbe created at `render()` time and assigned to `this.body`.  If an object is\npassed, `body` will be set immediately.\n\nValid objects or classes will have a `render()` method, though it is\nrecommended that they be subclasses of `Y.Base` or `Y.View`.  If the object\nor class supports events, its `addTarget()` method will be called to bubble\nits events to this instance.\n\nThe core implementaion does not define a default `bodyView`.  Classes\nbuilt from this extension should define a default.",
            "itemtype": "attribute",
            "name": "bodyView",
            "type": "{Function|Object}",
            "class": "DataTable.Core",
            "module": "datatable-core"
        },
        {
            "file": "/Users/lsmith/dev/yui3-gallery/src/gallery-datatable-350-preview/js/datatable.js",
            "line": 210,
            "description": "Content for the `<table summary=\"ATTRIBUTE VALUE HERE\">`.  Values assigned\nto this attribute will be HTML escaped for security.",
            "itemtype": "attribute",
            "name": "summary",
            "type": "{String}",
            "default": "'' (empty string)",
            "class": "DataTable.Core",
            "module": "datatable-core"
        },
        {
            "file": "/Users/lsmith/dev/yui3-gallery/src/gallery-datatable-350-preview/js/datatable.js",
            "line": 225,
            "description": "HTML content of an optional `<caption>` element to appear above the table.\nLeave this config unset or set to a falsy value to remove the caption.",
            "itemtype": "attribute",
            "name": "caption",
            "type": "HTML",
            "default": "'' (empty string)",
            "class": "DataTable.Core",
            "module": "datatable-core"
        },
        {
            "file": "/Users/lsmith/dev/yui3-gallery/src/gallery-datatable-350-preview/js/datatable.js",
            "line": 237,
            "description": "Deprecated as of 3.5.0. Passes through to the `data` attribute.\n\nWARNING: `get('recordset')` will NOT return a Recordset instance as of\n3.5.0.  This is a break in backward compatibility.",
            "itemtype": "attribute",
            "name": "recordset",
            "type": "{Object[]|Recordset}",
            "deprecated": true,
            "deprecationMessage": "Use the `data` attribute",
            "class": "DataTable.Core",
            "module": "datatable-core"
        },
        {
            "file": "/Users/lsmith/dev/yui3-gallery/src/gallery-datatable-350-preview/js/datatable.js",
            "line": 252,
            "description": "Deprecated as of 3.5.0. Passes through to the `columns` attribute.\n\nIf a Columnset object is passed, its raw object and array column data will\nbe extracted for use.\n\nWARNING: `get('columnset')` will NOT return a Columnset instance as of\n3.5.0.  This is a break in backward compatibility.",
            "itemtype": "attribute",
            "name": "columnset",
            "type": "{Object[]|Columnset}",
            "deprecated": true,
            "deprecationMessage": "Use the `columns` attribute",
            "class": "DataTable.Core",
            "module": "datatable-core"
        },
        {
            "file": "/Users/lsmith/dev/yui3-gallery/src/gallery-datatable-350-preview/js/datatable.js",
            "line": 274,
            "description": "The HTML template used to create the caption Node if the `caption`\nattribute is set.",
            "itemtype": "property",
            "name": "CAPTION_TEMPLATE",
            "type": "{HTML}",
            "default": "'<caption class=\"{className}\"/>'",
            "class": "DataTable.Core",
            "module": "datatable-core"
        },
        {
            "file": "/Users/lsmith/dev/yui3-gallery/src/gallery-datatable-350-preview/js/datatable.js",
            "line": 284,
            "description": "The HTML template used to create the table Node.",
            "itemtype": "property",
            "name": "TABLE_TEMPLATE",
            "type": "{HTML}",
            "default": "'<table class=\"{className}\"/>'",
            "class": "DataTable.Core",
            "module": "datatable-core"
        },
        {
            "file": "/Users/lsmith/dev/yui3-gallery/src/gallery-datatable-350-preview/js/datatable.js",
            "line": 293,
            "description": "HTML template used to create table's `<tbody>` if configured with a\n`bodyView`.",
            "itemtype": "property",
            "name": "TBODY_TEMPLATE",
            "type": "{HTML}",
            "default": "'<tbody class=\"{className}\"/>'",
            "class": "DataTable.Core",
            "module": "datatable-core"
        },
        {
            "file": "/Users/lsmith/dev/yui3-gallery/src/gallery-datatable-350-preview/js/datatable.js",
            "line": 303,
            "description": "Template used to create the table's `<tfoot>` if configured with a\n`footerView`.",
            "itemtype": "property",
            "name": "TFOOT_TEMPLATE",
            "type": "{HTML}",
            "default": "'<tfoot class=\"{className}\"/>'",
            "class": "DataTable.Core",
            "module": "datatable-core"
        },
        {
            "file": "/Users/lsmith/dev/yui3-gallery/src/gallery-datatable-350-preview/js/datatable.js",
            "line": 314,
            "description": "Template used to create the table's `<thead>` if configured with a\n`headerView`.",
            "itemtype": "property",
            "name": "THEAD_TEMPLATE",
            "type": "{HTML}",
            "default": "'<thead class=\"{className}\"/>'",
            "class": "DataTable.Core",
            "module": "datatable-core"
        },
        {
            "file": "/Users/lsmith/dev/yui3-gallery/src/gallery-datatable-350-preview/js/datatable.js",
            "line": 325,
            "description": "The object or instance of the class assigned to `bodyView` that is\nresponsible for rendering and managing the table's `<tbody>`(s) and its\ncontent.",
            "itemtype": "property",
            "name": "body",
            "type": "{Object}",
            "default": "undefined (initially unset)",
            "class": "DataTable.Core",
            "module": "datatable-core"
        },
        {
            "file": "/Users/lsmith/dev/yui3-gallery/src/gallery-datatable-350-preview/js/datatable.js",
            "line": 336,
            "description": "The object or instance of the class assigned to `footerView` that is\nresponsible for rendering and managing the table's `<tfoot>` and its\ncontent.",
            "itemtype": "property",
            "name": "foot",
            "type": "{Object}",
            "default": "undefined (initially unset)",
            "class": "DataTable.Core",
            "module": "datatable-core"
        },
        {
            "file": "/Users/lsmith/dev/yui3-gallery/src/gallery-datatable-350-preview/js/datatable.js",
            "line": 347,
            "description": "The object or instance of the class assigned to `headerView` that is\nresponsible for rendering and managing the table's `<thead>` and its\ncontent.",
            "itemtype": "property",
            "name": "head",
            "type": "{Object}",
            "default": "undefined (initially unset)",
            "class": "DataTable.Core",
            "module": "datatable-core"
        },
        {
            "file": "/Users/lsmith/dev/yui3-gallery/src/gallery-datatable-350-preview/js/datatable.js",
            "line": 358,
            "description": "The ModelList that manages the table's data.",
            "itemtype": "property",
            "name": "data",
            "type": "{ModelList}",
            "default": "undefined (initially unset)",
            "class": "DataTable.Core",
            "module": "datatable-core"
        },
        {
            "file": "/Users/lsmith/dev/yui3-gallery/src/gallery-datatable-350-preview/js/datatable.js",
            "line": 368,
            "description": "Pass through to `delegate()` called from the `contentBox`.",
            "itemtype": "method",
            "name": "delegate",
            "params": [
                {
                    "name": "type",
                    "description": "the event type to delegate",
                    "type": "String"
                },
                {
                    "name": "fn",
                    "description": "the callback function to execute.  This function\n             will be provided the event object for the delegated event.",
                    "type": "Function"
                },
                {
                    "name": "spec",
                    "description": "a selector that must match the target of the\n             event or a function to test target and its parents for a match",
                    "type": "String|Function"
                },
                {
                    "name": "context",
                    "description": "optional argument that specifies what 'this' refers to",
                    "type": "Object"
                },
                {
                    "name": "args",
                    "description": "0..n additional arguments to pass on to the callback\n             function.  These arguments will be added after the event object.",
                    "type": "Any",
                    "multiple": true
                }
            ],
            "return": {
                "description": "the detach handle",
                "type": "EventHandle"
            },
            "class": "DataTable.Core",
            "module": "datatable-core"
        },
        {
            "file": "/Users/lsmith/dev/yui3-gallery/src/gallery-datatable-350-preview/js/datatable.js",
            "line": 388,
            "description": "Returns the Node for a cell at the given coordinates.\n\nTechnically, this only relays to the `bodyView` instance's `getCell` method.\nIf the `bodyView` doesn't have a `getCell` method, `undefined` is returned.",
            "itemtype": "method",
            "name": "getCell",
            "params": [
                {
                    "name": "row",
                    "description": "Index of the cell's containing row",
                    "type": "Number"
                },
                {
                    "name": "col",
                    "description": "Index of the cell's containing column",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Node"
            },
            "class": "DataTable.Core",
            "module": "datatable-core"
        },
        {
            "file": "/Users/lsmith/dev/yui3-gallery/src/gallery-datatable-350-preview/js/datatable.js",
            "line": 403,
            "description": "Gets the column configuration object for the given key, name, or index.  For\nnested columns, `name` can be an array of indexes, each identifying the index\nof that column in the respective parent's \"children\" array.\n\nIf you pass a column object, it will be returned.\n\nFor columns with keys, you can also fetch the column with\n`instance.get('columns.foo')`.",
            "itemtype": "method",
            "name": "getColumn",
            "params": [
                {
                    "name": "name",
                    "description": "Key, \"name\", index, or index array to\n            identify the column",
                    "type": "String|Number|Number[]"
                }
            ],
            "return": {
                "description": "the column configuration object",
                "type": "Object"
            },
            "class": "DataTable.Core",
            "module": "datatable-core"
        },
        {
            "file": "/Users/lsmith/dev/yui3-gallery/src/gallery-datatable-350-preview/js/datatable.js",
            "line": 451,
            "description": "Returns the Node for a row at the given index.\n\nTechnically, this only relays to the `bodyView` instance's `getRow` method.\nIf the `bodyView` doesn't have a `getRow` method, `undefined` is returned.",
            "itemtype": "method",
            "name": "getRow",
            "params": [
                {
                    "name": "index",
                    "description": "Index of the row in the data `<tbody>`",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Node"
            },
            "class": "DataTable.Core",
            "module": "datatable-core"
        },
        {
            "file": "/Users/lsmith/dev/yui3-gallery/src/gallery-datatable-350-preview/js/datatable.js",
            "line": 465,
            "description": "Updates the UI with the current attribute state.",
            "itemtype": "method",
            "name": "syncUI",
            "class": "DataTable.Core",
            "module": "datatable-core"
        },
        {
            "file": "/Users/lsmith/dev/yui3-gallery/src/gallery-datatable-350-preview/js/datatable.js",
            "line": 477,
            "description": "Configuration object passed to the class constructor in `bodyView` during\nrender.\n\nThis property is set by the `_initViewConfig` method at instantiation.",
            "itemtype": "property",
            "name": "_bodyConfig",
            "type": "{Object}",
            "default": "undefined (initially unset)",
            "access": "protected",
            "tagname": "",
            "class": "DataTable.Core",
            "module": "datatable-core"
        },
        {
            "file": "/Users/lsmith/dev/yui3-gallery/src/gallery-datatable-350-preview/js/datatable.js",
            "line": 490,
            "description": "A map of column key to column configuration objects parsed from the\n`columns` attribute.",
            "itemtype": "property",
            "name": "_columnMap",
            "type": "{Object}",
            "default": "undefined (initially unset)",
            "access": "protected",
            "tagname": "",
            "class": "DataTable.Core",
            "module": "datatable-core"
        },
        {
            "file": "/Users/lsmith/dev/yui3-gallery/src/gallery-datatable-350-preview/js/datatable.js",
            "line": 501,
            "description": "Configuration object passed to the class constructor in `footerView` during\nrender.\n\nThis property is set by the `_initViewConfig` method at instantiation.",
            "itemtype": "property",
            "name": "_footerConfig",
            "type": "{Object}",
            "default": "undefined (initially unset)",
            "access": "protected",
            "tagname": "",
            "class": "DataTable.Core",
            "module": "datatable-core"
        },
        {
            "file": "/Users/lsmith/dev/yui3-gallery/src/gallery-datatable-350-preview/js/datatable.js",
            "line": 514,
            "description": "Configuration object passed to the class constructor in `headerView` during\nrender.\n\nThis property is set by the `_initViewConfig` method at instantiation.",
            "itemtype": "property",
            "name": "_headerConfig",
            "type": "{Object}",
            "default": "undefined (initially unset)",
            "access": "protected",
            "tagname": "",
            "class": "DataTable.Core",
            "module": "datatable-core"
        },
        {
            "file": "/Users/lsmith/dev/yui3-gallery/src/gallery-datatable-350-preview/js/datatable.js",
            "line": 527,
            "description": "The Node instance of the table containing the data rows.  This is set when\nthe table is rendered.  It may also be set by progressive enhancement,\nthough this extension does not provide the logic to parse from source.",
            "itemtype": "property",
            "name": "_tableNode",
            "type": "{Node}",
            "default": "undefined (initially unset)",
            "access": "protected",
            "tagname": "",
            "class": "DataTable.Core",
            "module": "datatable-core"
        },
        {
            "file": "/Users/lsmith/dev/yui3-gallery/src/gallery-datatable-350-preview/js/datatable.js",
            "line": 539,
            "description": "Configuration object used as the prototype of `_headerConfig`,\n`_bodyConfig`, and `_footerConfig`. Add properties to this object if you\nwant them in all three of the other config objects.\n\nThis property is set by the `_initViewConfig` method at instantiation.",
            "itemtype": "property",
            "name": "_viewConfig",
            "type": "{Object}",
            "default": "undefined (initially unset)",
            "access": "protected",
            "tagname": "",
            "class": "DataTable.Core",
            "module": "datatable-core"
        },
        {
            "file": "/Users/lsmith/dev/yui3-gallery/src/gallery-datatable-350-preview/js/datatable.js",
            "line": 553,
            "description": "Updates the `_columnMap` property in response to changes in the `columns`\nattribute.",
            "itemtype": "method",
            "name": "_afterColumnsChange",
            "params": [
                {
                    "name": "e",
                    "description": "The `columnsChange` event object",
                    "type": "EventFacade"
                }
            ],
            "access": "protected",
            "tagname": "",
            "class": "DataTable.Core",
            "module": "datatable-core"
        },
        {
            "file": "/Users/lsmith/dev/yui3-gallery/src/gallery-datatable-350-preview/js/datatable.js",
            "line": 566,
            "description": "Subscribes to attribute change events to update the UI.",
            "itemtype": "method",
            "name": "bindUI",
            "access": "protected",
            "tagname": "",
            "class": "DataTable.Core",
            "module": "datatable-core"
        },
        {
            "file": "/Users/lsmith/dev/yui3-gallery/src/gallery-datatable-350-preview/js/datatable.js",
            "line": 576,
            "description": "Creates a Model subclass from an array of attribute names or an object of\nattribute definitions.  This is used to generate a class suitable to\nrepresent the data passed to the `data` attribute if no `recordType` is\nset.",
            "itemtype": "method",
            "name": "_createRecordClass",
            "params": [
                {
                    "name": "attrs",
                    "description": "Names assigned to the Model subclass's\n            `ATTRS` or its entire `ATTRS` definition object",
                    "type": "String[]|Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Model"
            },
            "access": "protected",
            "tagname": "",
            "class": "DataTable.Core",
            "module": "datatable-core"
        },
        {
            "file": "/Users/lsmith/dev/yui3-gallery/src/gallery-datatable-350-preview/js/datatable.js",
            "line": 604,
            "description": "Creates the `<table>`.",
            "itemtype": "method",
            "name": "_createTable",
            "return": {
                "description": "The `<table>` node",
                "type": "Node"
            },
            "access": "protected",
            "tagname": "",
            "class": "DataTable.Core",
            "module": "datatable-core"
        },
        {
            "file": "/Users/lsmith/dev/yui3-gallery/src/gallery-datatable-350-preview/js/datatable.js",
            "line": 617,
            "description": "Creates a `<tbody>` node from the `TBODY_TEMPLATE`.",
            "itemtype": "method",
            "name": "_createTBody",
            "access": "protected",
            "tagname": "",
            "class": "DataTable.Core",
            "module": "datatable-core"
        },
        {
            "file": "/Users/lsmith/dev/yui3-gallery/src/gallery-datatable-350-preview/js/datatable.js",
            "line": 629,
            "description": "Creates a `<tfoot>` node from the `TFOOT_TEMPLATE`.",
            "itemtype": "method",
            "name": "_createTFoot",
            "access": "protected",
            "tagname": "",
            "class": "DataTable.Core",
            "module": "datatable-core"
        },
        {
            "file": "/Users/lsmith/dev/yui3-gallery/src/gallery-datatable-350-preview/js/datatable.js",
            "line": 641,
            "description": "Creates a `<thead>` node from the `THEAD_TEMPLATE`.",
            "itemtype": "method",
            "name": "_createTHead",
            "access": "protected",
            "tagname": "",
            "class": "DataTable.Core",
            "module": "datatable-core"
        },
        {
            "file": "/Users/lsmith/dev/yui3-gallery/src/gallery-datatable-350-preview/js/datatable.js",
            "line": 653,
            "description": "Calls `render()` on the `bodyView` class instance and inserts the view's\ncontainer into the `<table>`.\n\nAssigns the instance's `body` property from `e.view` and the `_tbodyNode`\nfrom the view's `container` attribute.",
            "itemtype": "method",
            "name": "_defRenderBodyFn",
            "params": [
                {
                    "name": "e",
                    "description": "The renderBody event",
                    "type": "EventFacade"
                }
            ],
            "access": "protected",
            "tagname": "",
            "class": "DataTable.Core",
            "module": "datatable-core"
        },
        {
            "file": "/Users/lsmith/dev/yui3-gallery/src/gallery-datatable-350-preview/js/datatable.js",
            "line": 673,
            "description": "Calls `render()` on the `footerView` class instance and inserts the view's\ncontainer into the `<table>`.\n\nAssigns the instance's `foot` property from `e.view` and the `_tfootNode`\nfrom the view's `container` attribute.",
            "itemtype": "method",
            "name": "_defRenderFooterFn",
            "params": [
                {
                    "name": "e",
                    "description": "The renderFooter event",
                    "type": "EventFacade"
                }
            ],
            "access": "protected",
            "tagname": "",
            "class": "DataTable.Core",
            "module": "datatable-core"
        },
        {
            "file": "/Users/lsmith/dev/yui3-gallery/src/gallery-datatable-350-preview/js/datatable.js",
            "line": 694,
            "description": "Calls `render()` on the `headerView` class instance and inserts the view's\ncontainer into the `<table>`.\n\nAssigns the instance's `head` property from `e.view` and the `_theadNode`\nfrom the view's `container` attribute.",
            "itemtype": "method",
            "name": "_defRenderHeaderFn",
            "params": [
                {
                    "name": "e",
                    "description": "The renderHeader event",
                    "type": "EventFacade"
                }
            ],
            "access": "protected",
            "tagname": "",
            "class": "DataTable.Core",
            "module": "datatable-core"
        },
        {
            "file": "/Users/lsmith/dev/yui3-gallery/src/gallery-datatable-350-preview/js/datatable.js",
            "line": 715,
            "description": "Renders the `<table>`, `<caption>`, and `<colgroup>`.\n\nAssigns the generated table to the `_tableNode` property.",
            "itemtype": "method",
            "name": "_defRenderTableFn",
            "params": [
                {
                    "name": "e",
                    "description": "The renderTable event",
                    "type": "EventFacade"
                }
            ],
            "access": "protected",
            "tagname": "",
            "class": "DataTable.Core",
            "module": "datatable-core"
        },
        {
            "file": "/Users/lsmith/dev/yui3-gallery/src/gallery-datatable-350-preview/js/datatable.js",
            "line": 761,
            "description": "Contains column configuration objects for those columns believed to be intended for display in the `<tbody>`. Populated by `_setDisplayColumns`.",
            "itemtype": "property",
            "name": "_displayColumns",
            "type": "{Object[]}",
            "value": "undefined (initially not set)",
            "access": "protected",
            "tagname": "",
            "class": "DataTable.Core",
            "module": "datatable-core"
        },
        {
            "file": "/Users/lsmith/dev/yui3-gallery/src/gallery-datatable-350-preview/js/datatable.js",
            "line": 771,
            "description": "The getter for the `columns` attribute.  Returns the array of column\nconfiguration objects if `instance.get('columns')` is called, or the\nspecific column object if `instance.get('columns.columnKey')` is called.",
            "itemtype": "method",
            "name": "_getColumns",
            "params": [
                {
                    "name": "columns",
                    "description": "The full array of column objects",
                    "type": "Object[]"
                },
                {
                    "name": "name",
                    "description": "The attribute name requested\n                     (e.g. 'columns' or 'columns.foo');",
                    "type": "String"
                }
            ],
            "access": "protected",
            "tagname": "",
            "class": "DataTable.Core",
            "module": "datatable-core"
        },
        {
            "file": "/Users/lsmith/dev/yui3-gallery/src/gallery-datatable-350-preview/js/datatable.js",
            "line": 789,
            "description": "Relays the `get()` request for the deprecated `columnset` attribute to the\n`columns` attribute.\n\nTHIS BREAKS BACKWARD COMPATIBILITY.  3.4.1 and prior implementations will\nexpect a Columnset instance returned from `get('columnset')`.",
            "itemtype": "method",
            "name": "_getColumnset",
            "params": [
                {
                    "name": "ignored",
                    "description": "The current value stored in the `columnset` state",
                    "type": "Object"
                },
                {
                    "name": "name",
                    "description": "The attribute name requested\n                     (e.g. 'columnset' or 'columnset.foo');",
                    "type": "String"
                }
            ],
            "deprecated": true,
            "deprecationMessage": "This will be removed with the `columnset` attribute in a future\n            version.",
            "access": "protected",
            "tagname": "",
            "class": "DataTable.Core",
            "module": "datatable-core"
        },
        {
            "file": "/Users/lsmith/dev/yui3-gallery/src/gallery-datatable-350-preview/js/datatable.js",
            "line": 808,
            "description": "The getter for the `data` attribute.  Returns the ModelList stored in the\n`data` property.  If the ModelList is not yet set, it returns the current\nraw data (presumably an empty array or `undefined`).",
            "itemtype": "method",
            "name": "_getData",
            "params": [
                {
                    "name": "val",
                    "description": "The current data stored in the attribute",
                    "type": "Object[]|ModelList"
                }
            ],
            "access": "protected",
            "tagname": "",
            "class": "DataTable.Core",
            "module": "datatable-core"
        },
        {
            "file": "/Users/lsmith/dev/yui3-gallery/src/gallery-datatable-350-preview/js/datatable.js",
            "line": 821,
            "description": "Initializes the `_columnMap` property from the configured `columns`\nattribute.  If `columns` is not set, but `recordType` is, it uses the\n`ATTRS` of that class.  If neither are set, it temporarily falls back to an\nempty array. `_initRecordType` will call back into this method if it finds\nthe `columnMap` empty.",
            "itemtype": "method",
            "name": "_initColumns",
            "access": "protected",
            "tagname": "",
            "class": "DataTable.Core",
            "module": "datatable-core"
        },
        {
            "file": "/Users/lsmith/dev/yui3-gallery/src/gallery-datatable-350-preview/js/datatable.js",
            "line": 849,
            "description": "Initializes the instance's `data` property from the value of the `data`\nattribute.  If the attribute value is a ModelList, it is assigned directly\nto `this.data`.  If it is an array, a ModelList is created, its `model`\nproperty is set to the configured `recordType` class, and it is seeded with\nthe array data.  This ModelList is then assigned to `this.data`.",
            "itemtype": "method",
            "name": "_initData",
            "access": "protected",
            "tagname": "",
            "class": "DataTable.Core",
            "module": "datatable-core"
        },
        {
            "file": "/Users/lsmith/dev/yui3-gallery/src/gallery-datatable-350-preview/js/datatable.js",
            "line": 887,
            "description": "Publishes core events.",
            "itemtype": "method",
            "name": "_initEvents",
            "access": "protected",
            "tagname": "",
            "class": "DataTable.Core",
            "module": "datatable-core"
        },
        {
            "file": "/Users/lsmith/dev/yui3-gallery/src/gallery-datatable-350-preview/js/datatable.js",
            "line": 915,
            "description": "Initializes the columns, `recordType` and data ModelList.",
            "itemtype": "method",
            "name": "initializer",
            "access": "protected",
            "tagname": "",
            "class": "DataTable.Core",
            "module": "datatable-core"
        },
        {
            "file": "/Users/lsmith/dev/yui3-gallery/src/gallery-datatable-350-preview/js/datatable.js",
            "line": 941,
            "description": "If the `recordType` attribute is not set, this method attempts to set a\ndefault value.\n\nIt tries the following methods to determine a default:\n\n1. If the `data` attribute is set with a ModelList with a `model` property,\n   that class is used.\n2. If the `data` attribute is set with a non-empty ModelList, the\n   `constructor` of the first item is used.\n3. If the `data` attribute is set with a non-empty array and the first item\n   is a Base subclass, its constructor is used.\n4. If the `data` attribute is set with a non-empty array a custom Model\n   subclass is generated using the keys of the first item as its `ATTRS`.\n5. If the `_columnMap` property has keys, a custom Model subclass is\n   generated using those keys as its `ATTRS`.\n\nOf none of those are successful, it subscribes to the change events for\n`columns`, `recordType`, and `data` to try again.\n\nIf defaulting the `recordType` and the current `_columnMap` property is\nempty, it will call `_initColumns`.",
            "itemtype": "method",
            "name": "_initRecordType",
            "access": "protected",
            "tagname": "",
            "class": "DataTable.Core",
            "module": "datatable-core"
        },
        {
            "file": "/Users/lsmith/dev/yui3-gallery/src/gallery-datatable-350-preview/js/datatable.js",
            "line": 1036,
            "description": "Initializes the `_viewConfig`, `_headerConfig`, `_bodyConfig`, and\n`_footerConfig` properties with the configuration objects that will be\npassed to the constructors of the `headerView`, `bodyView`, and\n`footerView`.\n\nExtensions can add to the config objects to deliver custom parameters at\nview instantiation.  `_viewConfig` is used as the prototype of the other\nthree config objects, so properties added here will be inherited by all\nconfigs.",
            "itemtype": "method",
            "name": "_initViewConfig",
            "access": "protected",
            "tagname": "",
            "class": "DataTable.Core",
            "module": "datatable-core"
        },
        {
            "file": "/Users/lsmith/dev/yui3-gallery/src/gallery-datatable-350-preview/js/datatable.js",
            "line": 1062,
            "description": "Iterates the array of column configurations to capture all columns with a\n`key` property.  Columns that are represented as strings will be replaced\nwith objects with the string assigned as the `key` property.  If a column\nhas a `children` property, it will be iterated, adding any nested column\nkeys to the returned map. There is no limit to the levels of nesting.\n\nAll columns are assigned a `_yuid` stamp and `_id` property corresponding\nto the column's configured `name` or `key` property with any spaces\nreplaced with dashes.  If the same `name` or `key` appears in multiple\ncolumns, subsequent appearances will have their `_id` appended with an\nincrementing number (e.g. if column \"foo\" is included in the `columns`\nattribute twice, the first will get `_id` of \"foo\", and the second an `_id`\nof \"foo1\").\n\nThe result is an object map with column keys as the property name and the\ncorresponding column object as the associated value.",
            "itemtype": "method",
            "name": "_parseColumns",
            "params": [
                {
                    "name": "columns",
                    "description": "The array of column names or\n            configuration objects to scan",
                    "type": "Object[]|String[]"
                }
            ],
            "access": "protected",
            "tagname": "",
            "class": "DataTable.Core",
            "module": "datatable-core"
        },
        {
            "file": "/Users/lsmith/dev/yui3-gallery/src/gallery-datatable-350-preview/js/datatable.js",
            "line": 1140,
            "description": "Builds the table and attaches it to the DOM.  This requires the host class\nto provide a `contentBox` attribute.  This is typically provided by Widget.",
            "itemtype": "method",
            "name": "renderUI",
            "access": "protected",
            "tagname": "",
            "class": "DataTable.Core",
            "module": "datatable-core"
        },
        {
            "file": "/Users/lsmith/dev/yui3-gallery/src/gallery-datatable-350-preview/js/datatable.js",
            "line": 1180,
            "description": "Assigns the `_columnMap` property with the parsed results of the array of\ncolumn definitions passed.",
            "itemtype": "method",
            "name": "_setColumnMap",
            "params": [
                {
                    "name": "columns",
                    "description": "the raw column configuration objects or\n                                   key names",
                    "type": "Object[]|String[]"
                }
            ],
            "access": "protected",
            "tagname": "",
            "class": "DataTable.Core",
            "module": "datatable-core"
        },
        {
            "file": "/Users/lsmith/dev/yui3-gallery/src/gallery-datatable-350-preview/js/datatable.js",
            "line": 1193,
            "description": "Relays attribute assignments of the deprecated `columnset` attribute to the\n`columns` attribute.  If a Columnset is object is passed, its basic object\nstructure is mined.",
            "itemtype": "method",
            "name": "_setColumnset",
            "params": [
                {
                    "name": "val",
                    "description": "The columnset value to relay",
                    "type": "Array|Columnset"
                }
            ],
            "deprecated": true,
            "deprecationMessage": "This will be removed with the deprecated `columnset` attribute\n            in a later version.",
            "access": "protected",
            "tagname": "",
            "class": "DataTable.Core",
            "module": "datatable-core"
        },
        {
            "file": "/Users/lsmith/dev/yui3-gallery/src/gallery-datatable-350-preview/js/datatable.js",
            "line": 1212,
            "description": "Accepts an object with `each` and `getAttrs` (preferably a ModelList or\nsubclass) or an array of data objects.  If an array is passes, it will\ncreate a ModelList to wrap the data.  In doing so, it will set the created\nModelList's `model` property to the class in the `recordType` attribute,\nwhich will be defaulted if not yet set.\n\nIf the `data` property is already set with a ModelList, passing an array as\nthe value will call the ModelList's `reset()` method with that array rather\nthan replacing the stored ModelList wholesale.\n\nAny non-ModelList-ish and non-array value is invalid.",
            "itemtype": "method",
            "name": "_setData",
            "access": "protected",
            "tagname": "",
            "class": "DataTable.Core",
            "module": "datatable-core"
        },
        {
            "file": "/Users/lsmith/dev/yui3-gallery/src/gallery-datatable-350-preview/js/datatable.js",
            "line": 1261,
            "description": "Stores an array of columns intended for display in the `_displayColumns`\nproperty.  This method assumes that if a column configuration object does\nnot have children, it is a display column.",
            "itemtype": "method",
            "name": "_setDisplayColumns",
            "params": [
                {
                    "name": "columns",
                    "description": "Column config array to extract display columns from",
                    "type": "Object[]"
                }
            ],
            "access": "protected",
            "tagname": "",
            "class": "DataTable.Core",
            "module": "datatable-core"
        },
        {
            "file": "/Users/lsmith/dev/yui3-gallery/src/gallery-datatable-350-preview/js/datatable.js",
            "line": 1291,
            "description": "Relays the value assigned to the deprecated `recordset` attribute to the\n`data` attribute.  If a Recordset instance is passed, the raw object data\nwill be culled from it.",
            "itemtype": "method",
            "name": "_setRecordset",
            "params": [
                {
                    "name": "val",
                    "description": "The recordset value to relay",
                    "type": "Object[]|Recordset"
                }
            ],
            "deprecated": true,
            "deprecationMessage": "This will be removed with the deprecated `recordset` attribute\n            in a later version.",
            "access": "protected",
            "tagname": "",
            "class": "DataTable.Core",
            "module": "datatable-core"
        },
        {
            "file": "/Users/lsmith/dev/yui3-gallery/src/gallery-datatable-350-preview/js/datatable.js",
            "line": 1316,
            "description": "Accepts a Base subclass (preferably a Model subclass). Alternately, it will\ngenerate a custom Model subclass from an array of attribute names or an\nobject defining attributes and their respective configurations (it is\nassigned as the `ATTRS` of the new class).\n\nAny other value is invalid.",
            "itemtype": "method",
            "name": "_setRecordType",
            "params": [
                {
                    "name": "val",
                    "description": "The Model subclass, array of\n        attribute names, or the `ATTRS` definition for a custom model\n        subclass",
                    "type": "Function|String[]|Object"
                }
            ],
            "return": {
                "description": "A Base/Model subclass",
                "type": "Function"
            },
            "access": "protected",
            "tagname": "",
            "class": "DataTable.Core",
            "module": "datatable-core"
        },
        {
            "file": "/Users/lsmith/dev/yui3-gallery/src/gallery-datatable-350-preview/js/datatable.js",
            "line": 1344,
            "description": "Creates, removes, or updates the table's `<caption>` element per the input\nvalue.  Empty values result in the caption being removed.",
            "itemtype": "method",
            "name": "_uiSetCaption",
            "params": [
                {
                    "name": "htmlContent",
                    "description": "The content to populate the table caption",
                    "type": "HTML"
                }
            ],
            "access": "protected",
            "tagname": "",
            "class": "DataTable.Core",
            "module": "datatable-core"
        },
        {
            "file": "/Users/lsmith/dev/yui3-gallery/src/gallery-datatable-350-preview/js/datatable.js",
            "line": 1376,
            "description": "Updates the table's `summary` attribute with the input value.",
            "itemtype": "method",
            "name": "_uiSetSummary",
            "access": "protected",
            "tagname": "",
            "class": "DataTable.Core",
            "module": "datatable-core"
        },
        {
            "file": "/Users/lsmith/dev/yui3-gallery/src/gallery-datatable-350-preview/js/datatable.js",
            "line": 1390,
            "description": "Sets the `boundingBox` and table width per the input value.",
            "itemtype": "method",
            "name": "_uiSetWidth",
            "params": [
                {
                    "name": "width",
                    "description": "The width to make the table",
                    "type": "Number|String"
                }
            ],
            "access": "protected",
            "tagname": "",
            "class": "DataTable.Core",
            "module": "datatable-core"
        },
        {
            "file": "/Users/lsmith/dev/yui3-gallery/src/gallery-datatable-350-preview/js/datatable.js",
            "line": 1409,
            "description": "Verifies the input value is a function with a `render` method on its\nprototype.  `null` is also accepted to remove the default View.",
            "itemtype": "method",
            "name": "_validateView",
            "access": "protected",
            "tagname": "",
            "class": "DataTable.Core",
            "module": "datatable-core"
        },
        {
            "file": "/Users/lsmith/dev/yui3-gallery/src/gallery-datatable-350-preview/js/datatable.js",
            "line": 1501,
            "description": "Template used to create the table's header cell markup.  Override this to\ncustomize how these cells' markup is created.",
            "itemtype": "property",
            "name": "CELL_TEMPLATE",
            "type": "{HTML}",
            "default": "'<th id=\"{_yuid}\" {abbr} colspan=\"{_colspan}\" rowspan=\"{_rowspan}\" class=\"{className}\">{content}</th>'",
            "class": "DataTable.HeaderView",
            "module": "datatable-head",
            "namespace": "DataTable"
        },
        {
            "file": "/Users/lsmith/dev/yui3-gallery/src/gallery-datatable-350-preview/js/datatable.js",
            "line": 1512,
            "description": "The data representation of the header rows to render.  This is assigned by\nparsing the `columns` configuration array, and is used by the render()\nmethod.",
            "itemtype": "property",
            "name": "columns",
            "type": "{Array[]}",
            "default": "(initially unset)",
            "class": "DataTable.HeaderView",
            "module": "datatable-head",
            "namespace": "DataTable"
        },
        {
            "file": "/Users/lsmith/dev/yui3-gallery/src/gallery-datatable-350-preview/js/datatable.js",
            "line": 1524,
            "description": "The object that serves as the source of truth for column and row data.\nThis property is assigned at instantiation from the `source` property of\nthe configuration object passed to the constructor.",
            "itemtype": "property",
            "name": "source",
            "type": "{Object}",
            "default": "(initially unset)",
            "class": "DataTable.HeaderView",
            "module": "datatable-head",
            "namespace": "DataTable"
        },
        {
            "file": "/Users/lsmith/dev/yui3-gallery/src/gallery-datatable-350-preview/js/datatable.js",
            "line": 1536,
            "description": "Template used to create the table's header row markup.  Override this to\ncustomize the row markup.",
            "itemtype": "property",
            "name": "ROW_TEMPLATE",
            "type": "{HTML}",
            "default": "'<tr>{content}</tr>'",
            "class": "DataTable.HeaderView",
            "module": "datatable-head",
            "namespace": "DataTable"
        },
        {
            "file": "/Users/lsmith/dev/yui3-gallery/src/gallery-datatable-350-preview/js/datatable.js",
            "line": 1550,
            "description": "Builds a CSS class name from the provided tokens.  If the instance is\ncreated with `cssPrefix` or `source` in the configuration, it will use this\nprefix (the `_cssPrefix` of the `source` object) as the base token.  This\nallows class instances to generate markup with class names that correspond\nto the parent class that is consuming them.",
            "itemtype": "method",
            "name": "getClassName",
            "params": [
                {
                    "name": "token",
                    "description": "Any number of tokens to include in the class name",
                    "type": "String",
                    "multiple": true
                }
            ],
            "return": {
                "description": "The generated class name",
                "type": "String"
            },
            "class": "DataTable.HeaderView",
            "module": "datatable-head",
            "namespace": "DataTable"
        },
        {
            "file": "/Users/lsmith/dev/yui3-gallery/src/gallery-datatable-350-preview/js/datatable.js",
            "line": 1569,
            "description": "Creates the `<thead>` Node content by assembling markup generated by\npopulating the `ROW_TEMPLATE` and `CELL_TEMPLATE` templates with content\nfrom the `columns` property.",
            "itemtype": "method",
            "name": "render",
            "return": {
                "description": "The instance",
                "type": "HeaderView"
            },
            "chainable": 1,
            "class": "DataTable.HeaderView",
            "module": "datatable-head",
            "namespace": "DataTable"
        },
        {
            "file": "/Users/lsmith/dev/yui3-gallery/src/gallery-datatable-350-preview/js/datatable.js",
            "line": 1638,
            "description": "The base token for classes created with the `getClassName` method.",
            "itemtype": "property",
            "name": "_cssPrefix",
            "type": "{String}",
            "default": "'yui3-table'",
            "access": "protected",
            "tagname": "",
            "class": "DataTable.HeaderView",
            "module": "datatable-head",
            "namespace": "DataTable"
        },
        {
            "file": "/Users/lsmith/dev/yui3-gallery/src/gallery-datatable-350-preview/js/datatable.js",
            "line": 1648,
            "description": "Handles changes in the source's columns attribute.  Redraws the headers.",
            "itemtype": "method",
            "name": "_afterColumnsChange",
            "params": [
                {
                    "name": "e",
                    "description": "The `columnsChange` event object",
                    "type": "EventFacade"
                }
            ],
            "access": "protected",
            "tagname": "",
            "class": "DataTable.HeaderView",
            "module": "datatable-head",
            "namespace": "DataTable"
        },
        {
            "file": "/Users/lsmith/dev/yui3-gallery/src/gallery-datatable-350-preview/js/datatable.js",
            "line": 1661,
            "description": "Binds event subscriptions from the UI and the source (if assigned).",
            "itemtype": "method",
            "name": "bindUI",
            "access": "protected",
            "tagname": "",
            "class": "DataTable.HeaderView",
            "module": "datatable-head",
            "namespace": "DataTable"
        },
        {
            "file": "/Users/lsmith/dev/yui3-gallery/src/gallery-datatable-350-preview/js/datatable.js",
            "line": 1676,
            "description": "Destroys the instance.",
            "itemtype": "method",
            "name": "destructor",
            "access": "protected",
            "tagname": "",
            "class": "DataTable.HeaderView",
            "module": "datatable-head",
            "namespace": "DataTable"
        },
        {
            "file": "/Users/lsmith/dev/yui3-gallery/src/gallery-datatable-350-preview/js/datatable.js",
            "line": 1686,
            "description": "Holds the event subscriptions needing to be detached when the instance is\n`destroy()`ed.",
            "itemtype": "property",
            "name": "_eventHandles",
            "type": "{Object}",
            "default": "undefined (initially unset)",
            "access": "protected",
            "tagname": "",
            "class": "DataTable.HeaderView",
            "module": "datatable-head",
            "namespace": "DataTable"
        },
        {
            "file": "/Users/lsmith/dev/yui3-gallery/src/gallery-datatable-350-preview/js/datatable.js",
            "line": 1697,
            "description": "Initializes the instance. Reads the following configuration properties:\n\n  * `columns` - (REQUIRED) The initial column information\n  * `cssPrefix` - The base string for classes generated by `getClassName`\n  * `source` - The object to serve as source of truth for column info",
            "itemtype": "method",
            "name": "initializer",
            "params": [
                {
                    "name": "config",
                    "description": "Configuration data",
                    "type": "Object"
                }
            ],
            "access": "protected",
            "tagname": "",
            "class": "DataTable.HeaderView",
            "module": "datatable-head",
            "namespace": "DataTable"
        },
        {
            "file": "/Users/lsmith/dev/yui3-gallery/src/gallery-datatable-350-preview/js/datatable.js",
            "line": 1723,
            "description": "Translate the input column format into a structure useful for rendering a\n`<thead>`, rows, and cells.  The structure of the input is expected to be a\nsingle array of objects, where each object corresponds to a `<th>`.  Those\nobjects may contain a `children` property containing a similarly structured\narray to indicate the nested cells should be grouped under the parent\ncolumn's colspan in a separate row of header cells. E.g.\n\n<pre><code>\n[\n  { key: 'id' }, // no nesting\n  { key: 'name', children: [\n    { key: 'firstName', label: 'First' },\n    { key: 'lastName',  label: 'Last' } ] }\n]\n</code></pre>\n\nwould indicate two header rows with the first column 'id' being assigned a\n`rowspan` of `2`, the 'name' column appearing in the first row with a\n`colspan` of `2`, and the 'firstName' and 'lastName' columns appearing in\nthe second row, below the 'name' column.\n\n<pre>\n---------------------\n|    |     name     |\n|    |---------------\n| id | First | Last |\n---------------------\n</pre>\n\nSupported properties of the column objects include:\n\n  * `label`    - The HTML content of the header cell.\n  * `key`      - If `label` is not specified, the `key` is used for content.\n  * `children` - Array of columns to appear below this column in the next\n                 row.\n  * `abbr`     - The content of the 'abbr' attribute of the `<th>`\n  * `headerTemplate` - Overrides the instance's `CELL_TEMPLATE` for cells\n    in this column only.\n\nThe output structure is basically a simulation of the `<thead>` structure\nwith arrays for rows and objects for cells.  Column objects have the\nfollowing properties added to them:\n\n  * `colspan` - Per the `<th>` attribute\n  * `rowspan` - Per the `<th>` attribute\n  * `parent`  - If the column is a child of another column, this points to\n    its parent column\n  * `_yuid`   - A unique YUI generated id used as the `<th>`'s 'id' for\n    reference in the data `<td>`'s 'headers' attribute.\n\nThe column object is also used to provide values for {placeholder}\nreplacement in the `CELL_TEMPLATE`, so you can modify the template and\ninclude other column object properties to populate them.",
            "itemtype": "method",
            "name": "_parseColumns",
            "params": [
                {
                    "name": "data",
                    "description": "Array of column object data",
                    "type": "Object[]"
                }
            ],
            "return": {
                "description": "An array of arrays corresponding to the header row\n        structure to render",
                "type": "Array[]"
            },
            "access": "protected",
            "tagname": "",
            "class": "DataTable.HeaderView",
            "module": "datatable-head",
            "namespace": "DataTable"
        },
        {
            "file": "/Users/lsmith/dev/yui3-gallery/src/gallery-datatable-350-preview/js/datatable.js",
            "line": 1988,
            "description": "HTML template used to create table cells.",
            "itemtype": "property",
            "name": "CELL_TEMPLATE",
            "type": "{HTML}",
            "default": "'<td {headers} class=\"{className}\">{content}</td>'",
            "class": "DataTable.BodyView",
            "module": "datatable-body",
            "namespace": "DataTable"
        },
        {
            "file": "/Users/lsmith/dev/yui3-gallery/src/gallery-datatable-350-preview/js/datatable.js",
            "line": 1997,
            "description": "CSS class applied to even rows.  This is assigned at instantiation after\nsetting up the `_cssPrefix` for the instance.\n\nFor DataTable, this will be `yui3-datatable-even`.",
            "itemtype": "property",
            "name": "CLASS_EVEN",
            "type": "{String}",
            "default": "'yui3-table-even'",
            "class": "DataTable.BodyView",
            "module": "datatable-body",
            "namespace": "DataTable"
        },
        {
            "file": "/Users/lsmith/dev/yui3-gallery/src/gallery-datatable-350-preview/js/datatable.js",
            "line": 2009,
            "description": "CSS class applied to odd rows.  This is assigned at instantiation after\nsetting up the `_cssPrefix` for the instance.\n\nWhen used by DataTable instances, this will be `yui3-datatable-odd`.",
            "itemtype": "property",
            "name": "CLASS_ODD",
            "type": "{String}",
            "default": "'yui3-table-odd'",
            "class": "DataTable.BodyView",
            "module": "datatable-body",
            "namespace": "DataTable"
        },
        {
            "file": "/Users/lsmith/dev/yui3-gallery/src/gallery-datatable-350-preview/js/datatable.js",
            "line": 2021,
            "description": "HTML template used to create table rows.",
            "itemtype": "property",
            "name": "ROW_TEMPLATE",
            "type": "{HTML}",
            "default": "'<tr id=\"{rowId}\" class=\"{rowClass}\">{content}</tr>'",
            "class": "DataTable.BodyView",
            "module": "datatable-body",
            "namespace": "DataTable"
        },
        {
            "file": "/Users/lsmith/dev/yui3-gallery/src/gallery-datatable-350-preview/js/datatable.js",
            "line": 2030,
            "description": "The object that serves as the source of truth for column and row data.\nThis property is assigned at instantiation from the `source` property of\nthe configuration object passed to the constructor.",
            "itemtype": "property",
            "name": "source",
            "type": "{Object}",
            "default": "(initially unset)",
            "class": "DataTable.BodyView",
            "module": "datatable-body",
            "namespace": "DataTable"
        },
        {
            "file": "/Users/lsmith/dev/yui3-gallery/src/gallery-datatable-350-preview/js/datatable.js",
            "line": 2044,
            "description": "Returns the `<td>` Node from the given row and column index.  If there is\nno cell at the given coordinates, `null` is returned.",
            "itemtype": "method",
            "name": "getCell",
            "params": [
                {
                    "name": "row",
                    "description": "Zero based index of the row with the target cell",
                    "type": "Number"
                },
                {
                    "name": "col",
                    "description": "Zero based index of the column with the target cell",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Node"
            },
            "class": "DataTable.BodyView",
            "module": "datatable-body",
            "namespace": "DataTable"
        },
        {
            "file": "/Users/lsmith/dev/yui3-gallery/src/gallery-datatable-350-preview/js/datatable.js",
            "line": 2065,
            "description": "Builds a CSS class name from the provided tokens.  If the instance is\ncreated with `cssPrefix` or `source` in the configuration, it will use this\nprefix (the `_cssPrefix` of the `source` object) as the base token.  This\nallows class instances to generate markup with class names that correspond\nto the parent class that is consuming them.",
            "itemtype": "method",
            "name": "getClassName",
            "params": [
                {
                    "name": "token",
                    "description": "Any number of tokens to include in the class name",
                    "type": "String",
                    "multiple": true
                }
            ],
            "return": {
                "description": "The generated class name",
                "type": "String"
            },
            "class": "DataTable.BodyView",
            "module": "datatable-body",
            "namespace": "DataTable"
        },
        {
            "file": "/Users/lsmith/dev/yui3-gallery/src/gallery-datatable-350-preview/js/datatable.js",
            "line": 2084,
            "description": "Returns the `<tr>` Node from the given row index.  If there is\nno row at the given index, `null` is returned.",
            "itemtype": "method",
            "name": "getRow",
            "params": [
                {
                    "name": "row",
                    "description": "Zero based index of the row",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Node"
            },
            "class": "DataTable.BodyView",
            "module": "datatable-body",
            "namespace": "DataTable"
        },
        {
            "file": "/Users/lsmith/dev/yui3-gallery/src/gallery-datatable-350-preview/js/datatable.js",
            "line": 2099,
            "description": "Creates the table's `<tbody>` content by assembling markup generated by\npopulating the `ROW\\_TEMPLATE`, and `CELL\\_TEMPLATE` templates with content\nfrom the `columns` property and `modelList` attribute.\n\nThe rendering process happens in three stages:\n\n1. A row template is assembled from the `columns` property (see\n   `_createRowTemplate`)\n\n2. An HTML string is built up by concatening the application of the data in\n   each Model in the `modelList` to the row template. For cells with\n   `formatter`s, the function is called to generate cell content. Cells\n   with `nodeFormatter`s are ignored. For all other cells, the data value\n   from the Model attribute for the given column key is used.  The\n   accumulated row markup is then inserted into the container.\n\n3. If any column is configured with a `nodeFormatter`, the `modelList` is\n   iterated again to apply the `nodeFormatter`s.\n\nSupported properties of the column objects include:\n\n  * `key` - Used to link a column to an attribute in a Model.\n  * `name` - Used for columns that don't relate to an attribute in the Model\n    (`formatter` or `nodeFormatter` only) if the implementer wants a\n    predictable name to refer to in their CSS.\n  * `cellTemplate` - Overrides the instance's `CELL_TEMPLATE` for cells in\n    this column only.\n  * `formatter` - Used to customize or override the content value from the\n    Model.  These do not have access to the cell or row Nodes and should\n    return string (HTML) content.\n  * `nodeFormatter` - Used to provide content for a cell as well as perform\n    any custom modifications on the cell or row Node that could not be\n    performed by `formatter`s.  Should be used sparingly for better\n    performance.\n  * `emptyCellValue` - String (HTML) value to use if the Model data for a\n    column, or the content generated by a `formatter`, is the empty string,\n    `null`, or `undefined`.\n  * `allowHTML` - Set to `true` if a column value, `formatter`, or\n    `emptyCellValue` can contain HTML.  This defaults to `false` to protect\n    against XSS.\n  * `className` - Space delimited CSS classes to add to all `<td>`s in a\n    column.\n\nColumn `formatter`s are passed an object (`o`) with the following\nproperties:\n\n  * `value` - The current value of the column's associated attribute, if\n    any.\n  * `data` - An object map of Model keys to their current values.\n  * `record` - The Model instance.\n  * `column` - The column configuration object for the current column.\n  * `className` - Initially empty string to allow `formatter`s to add CSS \n    classes to the cell's `<td>`.\n  * `rowIndex` - The zero-based row number.\n  * `rowClass` - Initially empty string to allow `formatter`s to add CSS\n    classes to the cell's containing row `<tr>`.\n\nThey may return a value or update `o.value` to assign specific HTML\ncontent.  A returned value has higher precedence.\n\nColumn `nodeFormatter`s are passed an object (`o`) with the following\nproperties:\n\n  * `value` - The current value of the column's associated attribute, if\n    any.\n  * `td` - The `<td>` Node instance.\n  * `cell` - The `<div>` liner Node instance if present, otherwise, the\n    `<td>`.  When adding content to the cell, prefer appending into this\n    property.\n  * `data` - An object map of Model keys to their current values.\n  * `record` - The Model instance.\n  * `column` - The column configuration object for the current column.\n  * `rowIndex` - The zero-based row number.\n\nThey are expected to inject content into the cell's Node directly, including\nany \"empty\" cell content.  Each `nodeFormatter` will have access through the\nNode API to all cells and rows in the `<tbody>`, but not to the `<table>`,\nas it will not be attached yet.\n\nIf a `nodeFormatter` returns `false`, the `o.td` and `o.cell` Nodes will be\n`destroy()`ed to remove them from the Node cache and free up memory.  The\nDOM elements will remain as will any content added to them.  _It is highly\nadvisable to always return `false` from your `nodeFormatter`s_.",
            "itemtype": "method",
            "name": "render",
            "return": {
                "description": "The instance",
                "type": "BodyView"
            },
            "chainable": 1,
            "class": "DataTable.BodyView",
            "module": "datatable-body",
            "namespace": "DataTable"
        },
        {
            "file": "/Users/lsmith/dev/yui3-gallery/src/gallery-datatable-350-preview/js/datatable.js",
            "line": 2208,
            "description": "Handles changes in the source's columns attribute.  Redraws the table data.",
            "itemtype": "method",
            "name": "_afterColumnChange",
            "params": [
                {
                    "name": "e",
                    "description": "The `columnsChange` event object",
                    "type": "EventFacade"
                }
            ],
            "access": "protected",
            "tagname": "",
            "class": "DataTable.BodyView",
            "module": "datatable-body",
            "namespace": "DataTable"
        },
        {
            "file": "/Users/lsmith/dev/yui3-gallery/src/gallery-datatable-350-preview/js/datatable.js",
            "line": 2228,
            "description": "Handles modelList changes, including additions, deletions, and updates.\n\nModifies the existing table DOM accordingly.",
            "itemtype": "method",
            "name": "_afterDataChange",
            "params": [
                {
                    "name": "e",
                    "description": "The `change` event from the ModelList",
                    "type": "EventFacade"
                }
            ],
            "access": "protected",
            "tagname": "",
            "class": "DataTable.BodyView",
            "module": "datatable-body",
            "namespace": "DataTable"
        },
        {
            "file": "/Users/lsmith/dev/yui3-gallery/src/gallery-datatable-350-preview/js/datatable.js",
            "line": 2242,
            "description": "Iterates the `modelList`, and calls any `nodeFormatter`s found in the\n`columns` param on the appropriate cell Nodes in the `tbody`.",
            "itemtype": "method",
            "name": "_applyNodeFormatters",
            "params": [
                {
                    "name": "tbody",
                    "description": "The `<tbody>` Node whose columns to update",
                    "type": "Node"
                },
                {
                    "name": "columns",
                    "description": "The column configurations",
                    "type": "Object[]"
                }
            ],
            "access": "protected",
            "tagname": "",
            "class": "DataTable.BodyView",
            "module": "datatable-body",
            "namespace": "DataTable"
        },
        {
            "file": "/Users/lsmith/dev/yui3-gallery/src/gallery-datatable-350-preview/js/datatable.js",
            "line": 2306,
            "description": "Binds event subscriptions from the UI and the source (if assigned).",
            "itemtype": "method",
            "name": "bindUI",
            "access": "protected",
            "tagname": "",
            "class": "DataTable.BodyView",
            "module": "datatable-body",
            "namespace": "DataTable"
        },
        {
            "file": "/Users/lsmith/dev/yui3-gallery/src/gallery-datatable-350-preview/js/datatable.js",
            "line": 2329,
            "description": "The base token for classes created with the `getClassName` method.",
            "itemtype": "property",
            "name": "_cssPrefix",
            "type": "{String}",
            "default": "'yui3-table'",
            "access": "protected",
            "tagname": "",
            "class": "DataTable.BodyView",
            "module": "datatable-body",
            "namespace": "DataTable"
        },
        {
            "file": "/Users/lsmith/dev/yui3-gallery/src/gallery-datatable-350-preview/js/datatable.js",
            "line": 2339,
            "description": "Iterates the `modelList` and applies each Model to the `_rowTemplate`,\nallowing any column `formatter` or `emptyCellValue` to override cell\ncontent for the appropriate column.  The aggregated HTML string is\nreturned.",
            "itemtype": "method",
            "name": "_createDataHTML",
            "params": [
                {
                    "name": "columns",
                    "description": "The column configurations to customize the\n            generated cell content or class names",
                    "type": "Object[]"
                }
            ],
            "return": {
                "description": "The markup for all Models in the `modelList`, each applied\n            to the `_rowTemplate`",
                "type": "HTML"
            },
            "access": "protected",
            "tagname": "",
            "class": "DataTable.BodyView",
            "module": "datatable-body",
            "namespace": "DataTable"
        },
        {
            "file": "/Users/lsmith/dev/yui3-gallery/src/gallery-datatable-350-preview/js/datatable.js",
            "line": 2365,
            "description": "Applies the data of a given Model, modified by any column formatters and\nsupplemented by other template values to the instance's `_rowTemplate` (see\n`_createRowTemplate`).  The generated string is then returned.\n\nThe data from Model's attributes is fetched by `toJSON` and this data\nobject is appended with other properties to supply values to {placeholders}\nin the template.  For a template generated from a Model with 'foo' and 'bar'\nattributes, the data object would end up with the following properties\nbefore being used to populate the `_rowTemplate`:\n\n  * `clientID` - From Model, used the assign the `<tr>`'s 'id' attribute.\n  * `foo` - The value to populate the 'foo' column cell content.  This\n    value will be the value stored in the Model's `foo` attribute, or the\n    result of the column's `formatter` if assigned.  If the value is '', \n    `null`, or `undefined`, and the column's `emptyCellValue` is assigned,\n    that value will be used.\n  * `bar` - Same for the 'bar' column cell content.\n  * `foo-className` - String of CSS classes to apply to the `<td>`.\n  * `bar-className` - Same.\n  * `rowClass`      - String of CSS classes to apply to the `<tr>`. This\n    will be the odd/even class per the specified index plus any additional\n    classes assigned by column formatters (via `o.rowClass`).\n\nBecause this object is available to formatters, any additional properties\ncan be added to fill in custom {placeholders} in the `_rowTemplate`.",
            "itemtype": "method",
            "name": "_createRowHTML",
            "params": [
                {
                    "name": "model",
                    "description": "The Model instance to apply to the row template",
                    "type": "Model"
                },
                {
                    "name": "index",
                    "description": "The index the row will be appearing",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The markup for the provided Model, less any `nodeFormatter`s",
                "type": "HTML"
            },
            "access": "protected",
            "tagname": "",
            "class": "DataTable.BodyView",
            "module": "datatable-body",
            "namespace": "DataTable"
        },
        {
            "file": "/Users/lsmith/dev/yui3-gallery/src/gallery-datatable-350-preview/js/datatable.js",
            "line": 2457,
            "description": "Creates a custom HTML template string for use in generating the markup for\nindividual table rows with {placeholder}s to capture data from the Models\nin the `modelList` attribute or from column `formatter`s.\n\nAssigns the `_rowTemplate` property.",
            "itemtype": "method",
            "name": "_createRowTemplate",
            "params": [
                {
                    "name": "columns",
                    "description": "Array of column configuration objects",
                    "type": "Object[]"
                }
            ],
            "access": "protected",
            "tagname": "",
            "class": "DataTable.BodyView",
            "module": "datatable-body",
            "namespace": "DataTable"
        },
        {
            "file": "/Users/lsmith/dev/yui3-gallery/src/gallery-datatable-350-preview/js/datatable.js",
            "line": 2503,
            "description": "Destroys the instance.",
            "itemtype": "method",
            "name": "destructor",
            "access": "protected",
            "tagname": "",
            "class": "DataTable.BodyView",
            "module": "datatable-body",
            "namespace": "DataTable"
        },
        {
            "file": "/Users/lsmith/dev/yui3-gallery/src/gallery-datatable-350-preview/js/datatable.js",
            "line": 2513,
            "description": "Holds the event subscriptions needing to be detached when the instance is\n`destroy()`ed.",
            "itemtype": "property",
            "name": "_eventHandles",
            "type": "{Object}",
            "default": "undefined (initially unset)",
            "access": "protected",
            "tagname": "",
            "class": "DataTable.BodyView",
            "module": "datatable-body",
            "namespace": "DataTable"
        },
        {
            "file": "/Users/lsmith/dev/yui3-gallery/src/gallery-datatable-350-preview/js/datatable.js",
            "line": 2524,
            "description": "Initializes the instance. Reads the following configuration properties in\naddition to the instance attributes:\n\n  * `columns` - (REQUIRED) The initial column information\n  * `cssPrefix` - The base string for classes generated by `getClassName`\n  * `source` - The object to serve as source of truth for column info",
            "itemtype": "method",
            "name": "initializer",
            "params": [
                {
                    "name": "config",
                    "description": "Configuration data",
                    "type": "Object"
                }
            ],
            "access": "protected",
            "tagname": "",
            "class": "DataTable.BodyView",
            "module": "datatable-body",
            "namespace": "DataTable"
        },
        {
            "file": "/Users/lsmith/dev/yui3-gallery/src/gallery-datatable-350-preview/js/datatable.js",
            "line": 2552,
            "description": "Flattens an array of potentially nested column configurations into a single\ndepth array of data columns.  Columns that have children are disregarded in\nfavor of searching their child columns.  The resulting array corresponds 1:1\nwith columns that will contain data in the `<tbody>`.",
            "itemtype": "method",
            "name": "_parseColumns",
            "params": [
                {
                    "name": "data",
                    "description": "Array of unfiltered column configuration objects",
                    "type": "Object[]"
                },
                {
                    "name": "columns",
                    "description": "Working array of data columns. Used for recursion.",
                    "type": "Object[]"
                }
            ],
            "return": {
                "description": "Only those columns that will be rendered.",
                "type": "Object[]"
            },
            "access": "protected",
            "tagname": "",
            "class": "DataTable.BodyView",
            "module": "datatable-body",
            "namespace": "DataTable"
        },
        {
            "file": "/Users/lsmith/dev/yui3-gallery/src/gallery-datatable-350-preview/js/datatable.js",
            "line": 2589,
            "description": "The HTML template used to create a full row of markup for a single Model in\nthe `modelList` plus any customizations defined in the column\nconfigurations.",
            "itemtype": "property",
            "name": "_rowTemplate",
            "type": "{HTML}",
            "default": "(initially unset)",
            "access": "protected",
            "tagname": "",
            "class": "DataTable.BodyView",
            "module": "datatable-body",
            "namespace": "DataTable"
        },
        {
            "file": "/Users/lsmith/dev/yui3-gallery/src/gallery-datatable-350-preview/js/datatable.js",
            "line": 2896,
            "description": "Controls whether `addRow`, `removeRow`, and `modifyRow` should trigger the\nunderlying Model's sync layer by default.\n\nWhen `true`, it is unnecessary to pass the \"sync\" configuration property to\nthose methods to trigger per-operation sync.",
            "itemtype": "attribute",
            "name": "autoSync",
            "type": "{Boolean}",
            "default": "`false`",
            "class": "DataTable",
            "module": "datatable-mutable"
        },
        {
            "file": "/Users/lsmith/dev/yui3-gallery/src/gallery-datatable-350-preview/js/datatable.js",
            "line": 2916,
            "description": "Adds the column configuration to the DataTable's `columns` configuration.\nIf the `index` parameter is supplied, it is injected at that index.  If the\ntable has nested headers, inject a subcolumn by passing an array of indexes\nto identify the new column's final location.\n\nThe `index` parameter is required if adding a nested column.\n\nThis method is a convienience method for fetching the DataTable's `columns`\nattribute, updating it, and calling \n`table.set('columns', _updatedColumnsDefs_)`\n\nFor example:\n\n<pre><code>// Becomes last column\ntable.addColumn('name');\n\n// Inserted after the current second column, moving the current third column\n// to index 4\ntable.addColumn({ key: 'price', formatter: currencyFormatter }, 2 );\n\n// Insert a new column in a set of headers three rows deep.  The index array\n// translates to\n// [ 2, --  in the third column's children\n//   1, --  in the second child's children\n//   3 ] -- as the fourth child column\ntable.addColumn({ key: 'age', sortable: true }, [ 2, 1, 3 ]);\n</code></pre>",
            "itemtype": "method",
            "name": "addColumn",
            "params": [
                {
                    "name": "config",
                    "description": "The new column configuration object",
                    "type": "Object|String"
                },
                {
                    "name": "index",
                    "description": "the insertion index",
                    "type": "Number|Number[]",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "DataTable"
            },
            "chainable": 1,
            "class": "DataTable",
            "module": "datatable-mutable"
        },
        {
            "file": "/Users/lsmith/dev/yui3-gallery/src/gallery-datatable-350-preview/js/datatable.js",
            "line": 2969,
            "description": "Updates an existing column definition. Fires the `modifyColumn` event.\n\nFor example:\n\n<pre><code>// Add a formatter to the existing 'price' column definition\ntable.modifyColumn('price', { formatter: currencyFormatter });\n\n// Change the label on a header cell in a set of nested headers three rows\n// deep.  The index array translates to\n// [ 2,  -- in the third column's children\n//   1,  -- the second child\n//   3 ] -- the fourth child column\ntable.modifyColumn([2, 1, 3], { label: 'Experience' });\n</code></pre>",
            "itemtype": "method",
            "name": "modifyColumn",
            "params": [
                {
                    "name": "name",
                    "description": "The column key, name, index, or\n            current configuration object",
                    "type": "String|Number|Number[]|Object"
                },
                {
                    "name": "config",
                    "description": "The new column configuration properties",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "DataTable"
            },
            "chainable": 1,
            "class": "DataTable",
            "module": "datatable-mutable"
        },
        {
            "file": "/Users/lsmith/dev/yui3-gallery/src/gallery-datatable-350-preview/js/datatable.js",
            "line": 3007,
            "description": "Moves an existing column to a new location. Fires the `moveColumn` event.\n\nThe destination index can be a number or array of numbers to place a column\nheader in a nested header row.",
            "itemtype": "method",
            "name": "moveColumn",
            "params": [
                {
                    "name": "name",
                    "description": "The column key, name, index, or\n            current configuration object",
                    "type": "String|Number|Number[]|Object"
                },
                {
                    "name": "index",
                    "description": "The destination index of the column",
                    "type": "Number|Number[]"
                }
            ],
            "return": {
                "description": "",
                "type": "DataTable"
            },
            "chainable": 1,
            "class": "DataTable",
            "module": "datatable-mutable"
        },
        {
            "file": "/Users/lsmith/dev/yui3-gallery/src/gallery-datatable-350-preview/js/datatable.js",
            "line": 3031,
            "description": "Removes an existing column. Fires the `removeColumn` event.",
            "itemtype": "method",
            "name": "removeColumn",
            "params": [
                {
                    "name": "name",
                    "description": "The column key, name, index, or\n            current configuration object",
                    "type": "String|Number|Number[]|Object"
                }
            ],
            "return": {
                "description": "",
                "type": "DataTable"
            },
            "chainable": 1,
            "class": "DataTable",
            "module": "datatable-mutable"
        },
        {
            "file": "/Users/lsmith/dev/yui3-gallery/src/gallery-datatable-350-preview/js/datatable.js",
            "line": 3050,
            "description": "Adds a new record to the DataTable's `data` ModelList.  Record data can be\nan object of field values or an instance of the DataTable's configured\n`recordType` class.\n\nThis relays all parameters to the `data` ModelList's `add` method.\n\nIf a configuration object is passed as a second argument, and that object\nhas `sync: true` set, the underlying Model will be `save()`d.\n\nIf the DataTable's `autoSync` attribute is set to `true`, the additional\nargument is not needed.\n\nIf syncing and the last argument is a function, that function will be used\nas a callback to the Model's `save()` method.",
            "itemtype": "method",
            "name": "addRow",
            "params": [
                {
                    "name": "data",
                    "description": "The data or Model instance for the new record",
                    "type": "Object"
                },
                {
                    "name": "config",
                    "description": "Configuration to pass along",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "callback",
                    "description": "Callback function for Model's `save()`",
                    "type": "Function",
                    "optional": true,
                    "props": [
                        {
                            "name": "err",
                            "description": "If an error occurred or validation\n    failed, this parameter will contain the error. If the sync operation\n    succeeded, _err_ will be `null`.",
                            "type": "Error|null"
                        },
                        {
                            "name": "response",
                            "description": "The server's response. This value will\n    be passed to the `parse()` method, which is expected to parse it and\n    return an attribute hash.",
                            "type": "Any"
                        }
                    ]
                }
            ],
            "return": {
                "description": "",
                "type": "DataTable"
            },
            "chainable": 1,
            "class": "DataTable",
            "module": "datatable-mutable"
        },
        {
            "file": "/Users/lsmith/dev/yui3-gallery/src/gallery-datatable-350-preview/js/datatable.js",
            "line": 3106,
            "description": "Removes a record from the DataTable's `data` ModelList.  The record can be\nprovided explicitly or targeted by it's `id` (see ModelList's `getById`\nmethod), `clientId`, or index in the ModelList.\n\nAfter locating the target Model, this relays the Model and all other passed\narguments to the `data` ModelList's `remove` method.\n\nIf a configuration object is passed as a second argument, and that object\nhas `sync: true` set, the underlying Model will be destroyed, passing\n`{ delete: true }` to trigger calling the Model's sync layer.\n\nIf the DataTable's `autoSync` attribute is set to `true`, the additional\nargument is not needed.\n\nIf syncing and the last argument is a function, that function will be used\nas a callback to the Model's `destroy()` method.",
            "itemtype": "method",
            "name": "removeRow",
            "params": [
                {
                    "name": "id",
                    "description": "The Model instance or identifier",
                    "type": "Object|String|Number"
                },
                {
                    "name": "config",
                    "description": "Configuration to pass along",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "callback",
                    "description": "Callback function for Model's `save()`",
                    "type": "Function",
                    "optional": true,
                    "props": [
                        {
                            "name": "err",
                            "description": "If an error occurred or validation\n    failed, this parameter will contain the error. If the sync operation\n    succeeded, _err_ will be `null`.",
                            "type": "Error|null"
                        },
                        {
                            "name": "response",
                            "description": "The server's response. This value will\n    be passed to the `parse()` method, which is expected to parse it and\n    return an attribute hash.",
                            "type": "Any"
                        }
                    ]
                }
            ],
            "return": {
                "description": "",
                "type": "DataTable"
            },
            "chainable": 1,
            "class": "DataTable",
            "module": "datatable-mutable"
        },
        {
            "file": "/Users/lsmith/dev/yui3-gallery/src/gallery-datatable-350-preview/js/datatable.js",
            "line": 3179,
            "description": "Updates an existing record in the DataTable's `data` ModelList.  The record\ncan be provided explicitly or targeted by it's `id` (see ModelList's\n`getById` method), `clientId`, or index in the ModelList.\n\nAfter locating the target Model, this relays the all other passed\narguments to the Model's `setAttrs` method.\n\nIf a configuration object is passed as a second argument, and that object\nhas `sync: true` set, the underlying Model will be `save()`d.\n\nIf the DataTable's `autoSync` attribute is set to `true`, the additional\nargument is not needed.\n\nIf syncing and the last argument is a function, that function will be used\nas a callback to the Model's `save()` method.",
            "itemtype": "method",
            "name": "modifyRow",
            "params": [
                {
                    "name": "id",
                    "description": "The Model instance or identifier",
                    "type": "Object|String|Number"
                },
                {
                    "name": "data",
                    "description": "New data values for the Model",
                    "type": "Object"
                },
                {
                    "name": "config",
                    "description": "Configuration to pass along to `setAttrs()`",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "callback",
                    "description": "Callback function for Model's `save()`",
                    "type": "Function",
                    "optional": true,
                    "props": [
                        {
                            "name": "err",
                            "description": "If an error occurred or validation\n    failed, this parameter will contain the error. If the sync operation\n    succeeded, _err_ will be `null`.",
                            "type": "Error|null"
                        },
                        {
                            "name": "response",
                            "description": "The server's response. This value will\n    be passed to the `parse()` method, which is expected to parse it and\n    return an attribute hash.",
                            "type": "Any"
                        }
                    ]
                }
            ],
            "return": {
                "description": "",
                "type": "DataTable"
            },
            "chainable": 1,
            "class": "DataTable",
            "module": "datatable-mutable"
        },
        {
            "file": "/Users/lsmith/dev/yui3-gallery/src/gallery-datatable-350-preview/js/datatable.js",
            "line": 3243,
            "description": "Default function for the `addColumn` event.\n\nInserts the specified column at the provided index.",
            "itemtype": "method",
            "name": "_defAddColumnFn",
            "params": [
                {
                    "name": "e",
                    "description": "The `addColumn` event",
                    "type": "EventFacade",
                    "props": [
                        {
                            "name": "column",
                            "description": "The new column definition object",
                            "type": "Object"
                        },
                        {
                            "name": "index",
                            "description": "The array index to insert the new column",
                            "type": "Number|Number[]"
                        }
                    ]
                }
            ],
            "access": "protected",
            "tagname": "",
            "class": "DataTable",
            "module": "datatable-mutable"
        },
        {
            "file": "/Users/lsmith/dev/yui3-gallery/src/gallery-datatable-350-preview/js/datatable.js",
            "line": 3272,
            "description": "Default function for the `modifyColumn` event.\n\nMixes the new column properties into the specified column definition.",
            "itemtype": "method",
            "name": "_defModifyColumnFn",
            "params": [
                {
                    "name": "e",
                    "description": "The `modifyColumn` event",
                    "type": "EventFacade",
                    "props": [
                        {
                            "name": "column",
                            "description": "The column definition object or identifier",
                            "type": "Object|String|Number|Number[]"
                        },
                        {
                            "name": "newColumnDef",
                            "description": "The properties to assign to the column",
                            "type": "Object"
                        }
                    ]
                }
            ],
            "access": "protected",
            "tagname": "",
            "class": "DataTable",
            "module": "datatable-mutable"
        },
        {
            "file": "/Users/lsmith/dev/yui3-gallery/src/gallery-datatable-350-preview/js/datatable.js",
            "line": 3295,
            "description": "Default function for the `moveColumn` event.\n\nRemoves the specified column from its current location and inserts it at the\nspecified array index (may be an array of indexes for nested headers).",
            "itemtype": "method",
            "name": "_defMoveColumnFn",
            "params": [
                {
                    "name": "e",
                    "description": "The `moveColumn` event",
                    "type": "EventFacade",
                    "props": [
                        {
                            "name": "column",
                            "description": "The column definition object or identifier",
                            "type": "Object|String|Number|Number[]"
                        },
                        {
                            "name": "index",
                            "description": "The destination index to move to",
                            "type": "Object"
                        }
                    ]
                }
            ],
            "access": "protected",
            "tagname": "",
            "class": "DataTable",
            "module": "datatable-mutable"
        },
        {
            "file": "/Users/lsmith/dev/yui3-gallery/src/gallery-datatable-350-preview/js/datatable.js",
            "line": 3336,
            "description": "Default function for the `removeColumn` event.\n\nSplices the specified column from its containing columns array.",
            "itemtype": "method",
            "name": "_defRemoveColumnFn",
            "params": [
                {
                    "name": "e",
                    "description": "The `removeColumn` event",
                    "type": "EventFacade",
                    "props": [
                        {
                            "name": "column",
                            "description": "The column definition object or identifier",
                            "type": "Object|String|Number|Number[]"
                        }
                    ]
                }
            ],
            "access": "protected",
            "tagname": "",
            "class": "DataTable",
            "module": "datatable-mutable"
        },
        {
            "file": "/Users/lsmith/dev/yui3-gallery/src/gallery-datatable-350-preview/js/datatable.js",
            "line": 3364,
            "description": "Publishes the events used by the mutation methods:\n\n * addColumn\n * removeColumn\n * modifyColumn\n * moveColumn",
            "itemtype": "method",
            "name": "initializer",
            "access": "protected",
            "tagname": "",
            "class": "DataTable",
            "module": "datatable-mutable"
        },
        {
            "file": "/Users/lsmith/dev/yui3-gallery/src/gallery-datatable-350-preview/js/datatable.js",
            "line": 3385,
            "description": "Adds an array of new records to the DataTable's `data` ModelList.  Record data\ncan be an array of objects containing field values or an array of instance of\nthe DataTable's configured `recordType` class.\n\nThis relays all parameters to the `data` ModelList's `add` method.\n\nTechnically, this is an alias to `addRow`, but please use the appropriately\nnamed method for readability.\n\nIf a configuration object is passed as a second argument, and that object\nhas `sync: true` set, the underlying Models will be `save()`d.\n\nIf the DataTable's `autoSync` attribute is set to `true`, the additional\nargument is not needed.\n\nIf syncing and the last argument is a function, that function will be used\nas a callback to each Model's `save()` method.",
            "itemtype": "method",
            "name": "addRows",
            "params": [
                {
                    "name": "data",
                    "description": "The data or Model instances to add",
                    "type": "Object[]"
                },
                {
                    "name": "config",
                    "description": "Configuration to pass along",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "callback",
                    "description": "Callback function for each Model's `save()`",
                    "type": "Function",
                    "optional": true,
                    "props": [
                        {
                            "name": "err",
                            "description": "If an error occurred or validation\n    failed, this parameter will contain the error. If the sync operation\n    succeeded, _err_ will be `null`.",
                            "type": "Error|null"
                        },
                        {
                            "name": "response",
                            "description": "The server's response. This value will\n    be passed to the `parse()` method, which is expected to parse it and\n    return an attribute hash.",
                            "type": "Any"
                        }
                    ]
                }
            ],
            "return": {
                "description": "",
                "type": "DataTable"
            },
            "chainable": 1,
            "class": "DataTable",
            "module": "datatable-mutable"
        },
        {
            "file": "/Users/lsmith/dev/yui3-gallery/src/gallery-datatable-350-preview/js/datatable.js",
            "line": 3424,
            "description": "Fired by the `addColumn` method.",
            "itemtype": "event",
            "name": "addColumn",
            "preventable": "_defAddColumnFn",
            "params": [
                {
                    "name": "column",
                    "description": "The new column definition object",
                    "type": "Object"
                },
                {
                    "name": "index",
                    "description": "The array index to insert the new column",
                    "type": "Number|Number[]"
                }
            ],
            "class": "DataTable",
            "module": "datatable-mutable"
        },
        {
            "file": "/Users/lsmith/dev/yui3-gallery/src/gallery-datatable-350-preview/js/datatable.js",
            "line": 3433,
            "description": "Fired by the `removeColumn` method.",
            "itemtype": "event",
            "name": "removeColumn",
            "preventable": "_defRemoveColumnFn",
            "params": [
                {
                    "name": "column",
                    "description": "The column definition object or identifier",
                    "type": "Object|String|Number|Number[]"
                }
            ],
            "class": "DataTable",
            "module": "datatable-mutable"
        },
        {
            "file": "/Users/lsmith/dev/yui3-gallery/src/gallery-datatable-350-preview/js/datatable.js",
            "line": 3441,
            "description": "Fired by the `modifyColumn` method.",
            "itemtype": "event",
            "name": "modifyColumn",
            "preventable": "_defModifyColumnFn",
            "params": [
                {
                    "name": "column",
                    "description": "The column definition object or identifier",
                    "type": "Object|String|Number|Number[]"
                },
                {
                    "name": "newColumnDef",
                    "description": "The properties to assign to the column",
                    "type": "Object"
                }
            ],
            "class": "DataTable",
            "module": "datatable-mutable"
        },
        {
            "file": "/Users/lsmith/dev/yui3-gallery/src/gallery-datatable-350-preview/js/datatable.js",
            "line": 3450,
            "description": "Fired by the `moveColumn` method.",
            "itemtype": "event",
            "name": "moveColumn",
            "preventable": "_defMoveColumnFn",
            "params": [
                {
                    "name": "column",
                    "description": "The column definition object or identifier",
                    "type": "Object|String|Number|Number[]"
                },
                {
                    "name": "index",
                    "description": "The destination index to move to",
                    "type": "Object"
                }
            ],
            "class": "DataTable",
            "module": "datatable-mutable"
        },
        {
            "file": "/Users/lsmith/dev/yui3-gallery/src/gallery-datatable-350-preview/js/datatable.js",
            "line": 3495,
            "description": "Enables the display of messages in the table.  Setting this to false will\nprevent the message Node from being created and `showMessage` from doing\nanything.",
            "itemtype": "attribute",
            "name": "showMessages",
            "type": "{Boolean}",
            "default": "true",
            "class": "DataTable",
            "module": "datatable-message"
        },
        {
            "file": "/Users/lsmith/dev/yui3-gallery/src/gallery-datatable-350-preview/js/datatable.js",
            "line": 3511,
            "description": "Template used to generate the node that will be used to report messages.",
            "itemtype": "property",
            "name": "MESSAGE_TEMPLATE",
            "type": "{HTML}",
            "default": "<tbody class=\"{className}\"><td class=\"{contentClass}\" colspan=\"{colspan}\"></td></tbody>",
            "class": "DataTable",
            "module": "datatable-message"
        },
        {
            "file": "/Users/lsmith/dev/yui3-gallery/src/gallery-datatable-350-preview/js/datatable.js",
            "line": 3520,
            "description": "Hides the message node.",
            "itemtype": "method",
            "name": "hideMessage",
            "return": {
                "description": "",
                "type": "DataTable"
            },
            "chainable": 1,
            "class": "DataTable",
            "module": "datatable-message"
        },
        {
            "file": "/Users/lsmith/dev/yui3-gallery/src/gallery-datatable-350-preview/js/datatable.js",
            "line": 3534,
            "description": "Display the message node and set its content to `message`.  If there is a\nlocalized `strings` entry for the value of `message`, that string will be\nused.",
            "itemtype": "method",
            "name": "showMessage",
            "params": [
                {
                    "name": "message",
                    "description": "The message name or message itself to display",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "DataTable"
            },
            "chainable": 1,
            "class": "DataTable",
            "module": "datatable-message"
        },
        {
            "file": "/Users/lsmith/dev/yui3-gallery/src/gallery-datatable-350-preview/js/datatable.js",
            "line": 3572,
            "description": "Updates the colspan of the `<td>` used to display the messages.",
            "itemtype": "method",
            "name": "_afterMessageColumnsChange",
            "params": [
                {
                    "name": "e",
                    "description": "The columnsChange event",
                    "type": "EventFacade"
                }
            ],
            "access": "protected",
            "tagname": "",
            "class": "DataTable",
            "module": "datatable-message"
        },
        {
            "file": "/Users/lsmith/dev/yui3-gallery/src/gallery-datatable-350-preview/js/datatable.js",
            "line": 3592,
            "description": "Relays to `_uiSetMessage` to hide or show the message node.",
            "itemtype": "method",
            "name": "_afterMessageDataChange",
            "params": [
                {
                    "name": "e",
                    "description": "The dataChange event",
                    "type": "EventFacade"
                }
            ],
            "access": "protected",
            "tagname": "",
            "class": "DataTable",
            "module": "datatable-message"
        },
        {
            "file": "/Users/lsmith/dev/yui3-gallery/src/gallery-datatable-350-preview/js/datatable.js",
            "line": 3603,
            "description": "Removes the message node if `showMessages` is `false`, or relays to\n`_uiSetMessage` if `true`.",
            "itemtype": "method",
            "name": "_afterShowMessagesChange",
            "params": [
                {
                    "name": "e",
                    "description": "The showMessagesChange event",
                    "type": "EventFacade"
                }
            ],
            "access": "protected",
            "tagname": "",
            "class": "DataTable",
            "module": "datatable-message"
        },
        {
            "file": "/Users/lsmith/dev/yui3-gallery/src/gallery-datatable-350-preview/js/datatable.js",
            "line": 3623,
            "description": "Binds the events necessary to keep the message node in sync with the current\ntable and configuration state.",
            "itemtype": "method",
            "name": "_bindMessageUI",
            "access": "protected",
            "tagname": "",
            "class": "DataTable",
            "module": "datatable-message"
        },
        {
            "file": "/Users/lsmith/dev/yui3-gallery/src/gallery-datatable-350-preview/js/datatable.js",
            "line": 3640,
            "description": "Merges in the message related strings and hooks into the rendering cycle to\nalso render and bind the message node.",
            "itemtype": "method",
            "name": "initializer",
            "access": "protected",
            "tagname": "",
            "class": "DataTable",
            "module": "datatable-message"
        },
        {
            "file": "/Users/lsmith/dev/yui3-gallery/src/gallery-datatable-350-preview/js/datatable.js",
            "line": 3658,
            "description": "Creates the `_messageNode` property from the configured `MESSAGE_TEMPLATE`\nand inserts it before the `<table>`'s `<tbody>` node.",
            "itemtype": "method",
            "name": "_initMessageNode",
            "access": "protected",
            "tagname": "",
            "class": "DataTable",
            "module": "datatable-message"
        },
        {
            "file": "/Users/lsmith/dev/yui3-gallery/src/gallery-datatable-350-preview/js/datatable.js",
            "line": 3678,
            "description": "Add the messaging related strings to the `strings` map.",
            "itemtype": "method",
            "name": "_initMessageStrings",
            "access": "protected",
            "tagname": "",
            "class": "DataTable",
            "module": "datatable-message"
        },
        {
            "file": "/Users/lsmith/dev/yui3-gallery/src/gallery-datatable-350-preview/js/datatable.js",
            "line": 3690,
            "description": "Node used to display messages from `showMessage`.",
            "itemtype": "property",
            "name": "_messageNode",
            "type": "{Node}",
            "value": "`undefined` (not initially set)",
            "class": "DataTable",
            "module": "datatable-message"
        },
        {
            "file": "/Users/lsmith/dev/yui3-gallery/src/gallery-datatable-350-preview/js/datatable.js",
            "line": 3699,
            "description": "Synchronizes the message UI with the table state.",
            "itemtype": "method",
            "name": "_syncMessageUI",
            "access": "protected",
            "tagname": "",
            "class": "DataTable",
            "module": "datatable-message"
        },
        {
            "file": "/Users/lsmith/dev/yui3-gallery/src/gallery-datatable-350-preview/js/datatable.js",
            "line": 3709,
            "description": "Calls `hideMessage` or `showMessage` as appropriate based on the presence of\nrecords in the `data` ModelList.\n\nThis is called when `data` is reset or records are added or removed.  Also,\nif the `showMessages` attribute is updated.  In either case, if the\ntriggering event has a `message` property on the EventFacade, it will be\npassed to `showMessage` (if appropriate).  If no such property is on the\nfacade, the `emptyMessage` will be used (see the strings).",
            "itemtype": "method",
            "name": "_uiSetMessage",
            "params": [
                {
                    "name": "e",
                    "description": "The columnsChange event",
                    "type": "EventFacade"
                }
            ],
            "access": "protected",
            "tagname": "",
            "class": "DataTable",
            "module": "datatable-message"
        },
        {
            "file": "/Users/lsmith/dev/yui3-gallery/src/gallery-datatable-350-preview/js/datatable.js",
            "line": 3839,
            "description": "The HTML template used to create the table's `<col>`s.",
            "itemtype": "property",
            "name": "COL_TEMPLATE",
            "type": "{HTML}",
            "default": "'<col/>'",
            "class": "DataTable",
            "module": "datatable-column-widths"
        },
        {
            "file": "/Users/lsmith/dev/yui3-gallery/src/gallery-datatable-350-preview/js/datatable.js",
            "line": 3848,
            "description": "The HTML template used to create the table's `<colgroup>`.",
            "itemtype": "property",
            "name": "COLGROUP_TEMPLATE",
            "type": "{HTML}",
            "default": "'<colgroup/>'",
            "class": "DataTable",
            "module": "datatable-column-widths"
        },
        {
            "file": "/Users/lsmith/dev/yui3-gallery/src/gallery-datatable-350-preview/js/datatable.js",
            "line": 3857,
            "description": "Assigns the style width of the `<col>` representing the column identifed by\n`id` and updates the column configuration.\n\nPass the empty string for `width` to return a column to auto sizing.\n\nThis does not trigger a `columnsChange` event today, but I can be convinced\nthat it should.",
            "itemtype": "method",
            "name": "setColumnWidth",
            "params": [
                {
                    "name": "id",
                    "description": "The column config object or key, name, or\n        index of a column in the host's `_displayColumns` array.",
                    "type": "Number|String|Object"
                },
                {
                    "name": "width",
                    "description": "CSS width value. Numbers are treated as pixels",
                    "type": "Number|String"
                }
            ],
            "return": {
                "description": "",
                "type": "DataTable"
            },
            "chainable": 1,
            "class": "DataTable",
            "module": "datatable-column-widths"
        },
        {
            "file": "/Users/lsmith/dev/yui3-gallery/src/gallery-datatable-350-preview/js/datatable.js",
            "line": 3894,
            "description": "Renders the table's `<colgroup>` and populates the `_colgroupNode` property.",
            "itemtype": "method",
            "name": "_createColumnGroup",
            "access": "protected",
            "tagname": "",
            "class": "DataTable",
            "module": "datatable-column-widths"
        },
        {
            "file": "/Users/lsmith/dev/yui3-gallery/src/gallery-datatable-350-preview/js/datatable.js",
            "line": 3904,
            "description": "Hooks up to the rendering lifecycle to also render the `<colgroup>` and\nsubscribe to `columnChange` events.",
            "itemtype": "method",
            "name": "initializer",
            "access": "protected",
            "tagname": "",
            "class": "DataTable",
            "module": "datatable-column-widths"
        },
        {
            "file": "/Users/lsmith/dev/yui3-gallery/src/gallery-datatable-350-preview/js/datatable.js",
            "line": 3919,
            "description": "Sets a columns's `<col>` element width style. This is needed to get around\nbrowser rendering differences.\n\nThe colIndex corresponds to the item index of the `<col>` in the table's\n`<colgroup>`.\n\nTo unset the width, pass a falsy value for the `width`.",
            "itemtype": "method",
            "name": "_setColumnWidth",
            "params": [
                {
                    "name": "colIndex",
                    "description": "The display column index",
                    "type": "Number"
                },
                {
                    "name": "width",
                    "description": "The desired width",
                    "type": "Number|String"
                }
            ],
            "access": "protected",
            "tagname": "",
            "class": "DataTable",
            "module": "datatable-column-widths"
        },
        {
            "file": "/Users/lsmith/dev/yui3-gallery/src/gallery-datatable-350-preview/js/datatable.js",
            "line": 3975,
            "description": "Populates the table's `<colgroup>` with a `<col>` per item in the `columns`\nattribute without children.  It is assumed that these are the columns that\nhave data cells renderered for them.",
            "itemtype": "method",
            "name": "_uiSetColumns",
            "access": "protected",
            "tagname": "",
            "class": "DataTable",
            "module": "datatable-column-widths"
        },
        {
            "file": "/Users/lsmith/dev/yui3-gallery/src/gallery-datatable-350-preview/js/datatable.js",
            "line": 4052,
            "description": "Activates or deactivates scrolling in the table.  Acceptable values are:\n\n * `false` - (default) Scrolling is disabled.\n * `true` or 'xy' - If `height` is set, vertical scrolling will be activated, if\n            `width` is set, horizontal scrolling will be activated.\n * 'x' - Activate horizontal scrolling only. Requires the `width` attribute is\n         also set.\n * 'y' - Activate vertical scrolling only. Requires the `height` attribute is\n         also set.",
            "itemtype": "attribute",
            "name": "scrollable",
            "type": "{String|Boolean}",
            "value": "false",
            "class": "DataTable",
            "module": "datatable-scroll"
        },
        {
            "file": "/Users/lsmith/dev/yui3-gallery/src/gallery-datatable-350-preview/js/datatable.js",
            "line": 4075,
            "description": "Scrolls a given row or cell into view if the table is scrolling.  Pass the\n`clientId` of a Model from the DataTable's `data` ModelList or its row\nindex to scroll to a row or a [row index, column index] array to scroll to\na cell.  Alternately, to scroll to any element contained within the table's\nscrolling areas, pass its ID, or the Node itself (though you could just as\nwell call `node.scrollIntoView()` yourself, but hey, whatever).",
            "itemtype": "method",
            "name": "scrollTo",
            "params": [
                {
                    "name": "id",
                    "description": "A row clientId, row index, cell\n        coordinate array, id string, or Node",
                    "type": "String|Number|Number[]|Node"
                }
            ],
            "return": {
                "description": "",
                "type": "DataTable"
            },
            "chainable": 1,
            "class": "DataTable",
            "module": "datatable-scroll"
        },
        {
            "file": "/Users/lsmith/dev/yui3-gallery/src/gallery-datatable-350-preview/js/datatable.js",
            "line": 4115,
            "description": "Template for the `<table>` that is used to fix the caption in place when\nthe table is horizontally scrolling.",
            "itemtype": "property",
            "name": "_CAPTION_TABLE_TEMPLATE",
            "type": "{HTML}",
            "value": "'<table class=\"{className}\" role=\"presentation\"></table>'",
            "access": "protected",
            "tagname": "",
            "class": "DataTable",
            "module": "datatable-scroll"
        },
        {
            "file": "/Users/lsmith/dev/yui3-gallery/src/gallery-datatable-350-preview/js/datatable.js",
            "line": 4126,
            "description": "Template for the virtual scrollbar needed in \"xy\" scrolling setups.",
            "itemtype": "property",
            "name": "_SCROLLBAR_TEMPLATE",
            "type": "{HTML}",
            "value": "'<div class=\"{className}\"><div></div></div>'",
            "access": "protected",
            "tagname": "",
            "class": "DataTable",
            "module": "datatable-scroll"
        },
        {
            "file": "/Users/lsmith/dev/yui3-gallery/src/gallery-datatable-350-preview/js/datatable.js",
            "line": 4136,
            "description": "Template for the `<div>` that is used to contain the table when the table is\nhorizontally scrolling.",
            "itemtype": "property",
            "name": "_X_SCROLLER_TEMPLATE",
            "type": "{HTML}",
            "value": "'<div class=\"{className}\"></div>'",
            "access": "protected",
            "tagname": "",
            "class": "DataTable",
            "module": "datatable-scroll"
        },
        {
            "file": "/Users/lsmith/dev/yui3-gallery/src/gallery-datatable-350-preview/js/datatable.js",
            "line": 4147,
            "description": "Template for the `<div>` that is used to contain the rows when the table is\nvertically scrolling.",
            "itemtype": "property",
            "name": "_Y_SCROLLER_TEMPLATE",
            "type": "{HTML}",
            "value": "'<div class=\"{className}\"><table class=\"{tableClassName}\" role=\"presentation\"></table></div>'",
            "access": "protected",
            "tagname": "",
            "class": "DataTable",
            "module": "datatable-scroll"
        },
        {
            "file": "/Users/lsmith/dev/yui3-gallery/src/gallery-datatable-350-preview/js/datatable.js",
            "line": 4157,
            "description": "Creates a vertical scrollbar absolutely positioned over the right edge of the \n`_xScrollNode` to relay scrolling to the `_xScrollNode` (masked) below.\nWithout this, the `_yScrollNode`'s scrollbar would not be visible until the\n`_xScrollNode` was scrolled to the far right.",
            "itemtype": "method",
            "name": "_addVirtualScrollbar",
            "access": "protected",
            "tagname": "",
            "class": "DataTable",
            "module": "datatable-scroll"
        },
        {
            "file": "/Users/lsmith/dev/yui3-gallery/src/gallery-datatable-350-preview/js/datatable.js",
            "line": 4193,
            "description": "Relays changes in the table structure or content to trigger a reflow of the\nscrolling setup.",
            "itemtype": "method",
            "name": "_afterContentChange",
            "params": [
                {
                    "name": "e",
                    "description": "The relevant change event (ignored)",
                    "type": "EventFacade"
                }
            ],
            "access": "protected",
            "tagname": "",
            "class": "DataTable",
            "module": "datatable-scroll"
        },
        {
            "file": "/Users/lsmith/dev/yui3-gallery/src/gallery-datatable-350-preview/js/datatable.js",
            "line": 4209,
            "description": "Reacts to changes in the `scrollable` attribute by updating the `_xScroll`\nand `_yScroll` properties and syncing the scrolling structure accordingly.",
            "itemtype": "method",
            "name": "_afterScrollableChange",
            "params": [
                {
                    "name": "e",
                    "description": "The relevant change event (ignored)",
                    "type": "EventFacade"
                }
            ],
            "access": "protected",
            "tagname": "",
            "class": "DataTable",
            "module": "datatable-scroll"
        },
        {
            "file": "/Users/lsmith/dev/yui3-gallery/src/gallery-datatable-350-preview/js/datatable.js",
            "line": 4222,
            "description": "Syncs the scrolling structure if the table is configured to scroll vertically.",
            "itemtype": "method",
            "name": "_afterScrollHeightChange",
            "params": [
                {
                    "name": "e",
                    "description": "The relevant change event (ignored)",
                    "type": "EventFacade"
                }
            ],
            "access": "protected",
            "tagname": "",
            "class": "DataTable",
            "module": "datatable-scroll"
        },
        {
            "file": "/Users/lsmith/dev/yui3-gallery/src/gallery-datatable-350-preview/js/datatable.js",
            "line": 4233,
            "description": "Attaches internal subscriptions to keep the scrolling structure up to date\nwith changes in the table's `data`, `columns`, `caption`, or `height`.  The\n`width` is taken care of already.\n\nThis executes after the table's native `bindUI` method.",
            "itemtype": "method",
            "name": "_bindScrollUI",
            "access": "protected",
            "tagname": "",
            "class": "DataTable",
            "module": "datatable-scroll"
        },
        {
            "file": "/Users/lsmith/dev/yui3-gallery/src/gallery-datatable-350-preview/js/datatable.js",
            "line": 4256,
            "description": "Calculates the height of the div containing the vertically scrolling rows.\nThe height is produced by subtracting the `offsetHeight` of the scrolling\n`<div>` from the `clientHeight` of the `contentBox`.",
            "itemtype": "method",
            "name": "_calcScrollHeight",
            "access": "protected",
            "tagname": "",
            "class": "DataTable",
            "module": "datatable-scroll"
        },
        {
            "file": "/Users/lsmith/dev/yui3-gallery/src/gallery-datatable-350-preview/js/datatable.js",
            "line": 4274,
            "description": "Populates the `_xScrollNode` property by creating the `<div>` Node described\nby the `_X_SCROLLER_TEMPLATE`.",
            "itemtype": "method",
            "name": "_createXScrollNode",
            "access": "protected",
            "tagname": "",
            "class": "DataTable",
            "module": "datatable-scroll"
        },
        {
            "file": "/Users/lsmith/dev/yui3-gallery/src/gallery-datatable-350-preview/js/datatable.js",
            "line": 4290,
            "description": "Populates the `_yScrollNode` property by creating the `<div>` Node described\nby the `_Y_SCROLLER_TEMPLATE`.",
            "itemtype": "method",
            "name": "_createYScrollNode",
            "access": "protected",
            "tagname": "",
            "class": "DataTable",
            "module": "datatable-scroll"
        },
        {
            "file": "/Users/lsmith/dev/yui3-gallery/src/gallery-datatable-350-preview/js/datatable.js",
            "line": 4307,
            "description": "Assigns style widths to all columns based on their current `offsetWidth`s.\nThis faciliates creating a clone of the `<colgroup>` so column widths are\nthe same after the table is split in to header and data tables.",
            "itemtype": "method",
            "name": "_fixColumnWidths",
            "access": "protected",
            "tagname": "",
            "class": "DataTable",
            "module": "datatable-scroll"
        },
        {
            "file": "/Users/lsmith/dev/yui3-gallery/src/gallery-datatable-350-preview/js/datatable.js",
            "line": 4353,
            "description": "Sets up event handlers and AOP advice methods to bind the DataTable's natural\nbehaviors with the scrolling APIs and state.",
            "itemtype": "method",
            "name": "initializer",
            "params": [
                {
                    "name": "config",
                    "description": "The config object passed to the constructor (ignored)",
                    "type": "Object"
                }
            ],
            "access": "protected",
            "tagname": "",
            "class": "DataTable",
            "module": "datatable-scroll"
        },
        {
            "file": "/Users/lsmith/dev/yui3-gallery/src/gallery-datatable-350-preview/js/datatable.js",
            "line": 4371,
            "description": "Merges the caption and content tables back into one table if they are split.",
            "itemtype": "method",
            "name": "_mergeXScrollContent",
            "access": "protected",
            "tagname": "",
            "class": "DataTable",
            "module": "datatable-scroll"
        },
        {
            "file": "/Users/lsmith/dev/yui3-gallery/src/gallery-datatable-350-preview/js/datatable.js",
            "line": 4411,
            "description": "Merges the header and data tables back into one table if they are split.",
            "itemtype": "method",
            "name": "_mergeYScrollContent",
            "access": "protected",
            "tagname": "",
            "class": "DataTable",
            "module": "datatable-scroll"
        },
        {
            "file": "/Users/lsmith/dev/yui3-gallery/src/gallery-datatable-350-preview/js/datatable.js",
            "line": 4432,
            "description": "Removes the additional padding added to the last cells in each header row to\nallow the scrollbar to fit below.",
            "itemtype": "method",
            "name": "_removeHeaderScrollPadding",
            "access": "protected",
            "tagname": "",
            "class": "DataTable",
            "module": "datatable-scroll"
        },
        {
            "file": "/Users/lsmith/dev/yui3-gallery/src/gallery-datatable-350-preview/js/datatable.js",
            "line": 4450,
            "description": "Adds additional padding to the current amount of right padding on each row's\nlast cell to account for the width of the scrollbar below.",
            "itemtype": "method",
            "name": "_setHeaderScrollPadding",
            "access": "protected",
            "tagname": "",
            "class": "DataTable",
            "module": "datatable-scroll"
        },
        {
            "file": "/Users/lsmith/dev/yui3-gallery/src/gallery-datatable-350-preview/js/datatable.js",
            "line": 4473,
            "description": "Accepts (case insensitive) values \"x\", \"y\", \"xy\", `true`, and `false`.\n`true` is translated to \"xy\" and upper case values are converted to lower\ncase.  All other values are invalid.",
            "itemtype": "method",
            "name": "_setScrollable",
            "params": [
                {
                    "name": "val",
                    "description": "Incoming value for the `scrollable` attribute",
                    "type": "String|Boolea"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "access": "protected",
            "tagname": "",
            "class": "DataTable",
            "module": "datatable-scroll"
        },
        {
            "file": "/Users/lsmith/dev/yui3-gallery/src/gallery-datatable-350-preview/js/datatable.js",
            "line": 4497,
            "description": "Assigns the `_xScroll` and `_yScroll` properties to true if an\nappropriate value is set in the `scrollable` attribute and the `height`\nand/or `width` is set.",
            "itemtype": "method",
            "name": "_setScrollProperties",
            "access": "protected",
            "tagname": "",
            "class": "DataTable",
            "module": "datatable-scroll"
        },
        {
            "file": "/Users/lsmith/dev/yui3-gallery/src/gallery-datatable-350-preview/js/datatable.js",
            "line": 4514,
            "description": "Clones the fixed (see `_fixColumnWidths` method) `<colgroup>` for use by the\ntable in the vertical scrolling container.  The last column's width is reduced\nby the width of the scrollbar (which is offset by additional padding on the\nlast header cell(s) in the header table - see `_setHeaderScrollPadding`).",
            "itemtype": "method",
            "name": "_setYScrollColWidths",
            "access": "protected",
            "tagname": "",
            "class": "DataTable",
            "module": "datatable-scroll"
        },
        {
            "file": "/Users/lsmith/dev/yui3-gallery/src/gallery-datatable-350-preview/js/datatable.js",
            "line": 4549,
            "description": "Splits the data table from its caption if it has one and wraps the table in\na horizontally scrollable container `<div>`.",
            "itemtype": "method",
            "name": "_splitXScrollContent",
            "access": "protected",
            "tagname": "",
            "class": "DataTable",
            "module": "datatable-scroll"
        },
        {
            "file": "/Users/lsmith/dev/yui3-gallery/src/gallery-datatable-350-preview/js/datatable.js",
            "line": 4581,
            "description": "Splits the unified table with headers and data into two tables, the latter\ncontained within a vertically scrollable container `<div>`.",
            "itemtype": "method",
            "name": "_splitYScrollContent",
            "access": "protected",
            "tagname": "",
            "class": "DataTable",
            "module": "datatable-scroll"
        },
        {
            "file": "/Users/lsmith/dev/yui3-gallery/src/gallery-datatable-350-preview/js/datatable.js",
            "line": 4629,
            "description": "Splits or merges the table for X and Y scrolling depending on the current\nwidget state.  If the table needs to be split, but is already, does nothing.",
            "itemtype": "method",
            "name": "_syncScrollUI",
            "access": "protected",
            "tagname": "",
            "class": "DataTable",
            "module": "datatable-scroll"
        },
        {
            "file": "/Users/lsmith/dev/yui3-gallery/src/gallery-datatable-350-preview/js/datatable.js",
            "line": 4683,
            "description": "Keeps the `_yScrollNode` scroll position in sync with the `_scrollbarNode`\nin an \"xy\" scroll configuration.",
            "itemtype": "method",
            "name": "_syncVirtualScroll",
            "params": [
                {
                    "name": "e",
                    "description": "The scroll event",
                    "type": "DOMEventFacade"
                },
                {
                    "name": "details",
                    "description": "subscription details, including which of the two\n    scrolling elements is being scrolled",
                    "type": "Object"
                }
            ],
            "access": "protected",
            "tagname": "",
            "class": "DataTable",
            "module": "datatable-scroll"
        },
        {
            "file": "/Users/lsmith/dev/yui3-gallery/src/gallery-datatable-350-preview/js/datatable.js",
            "line": 4700,
            "description": "Overrides the default Widget `_uiSetWidth` to assign the width to either\nthe table or the `contentBox` (for horizontal scrolling) in addition to the\nnative behavior of setting the width of the `boundingBox`.",
            "itemtype": "method",
            "name": "_uiSetWidth",
            "params": [
                {
                    "name": "width",
                    "description": "CSS width value or number of pixels",
                    "type": "String|Number"
                }
            ],
            "access": "protected",
            "tagname": "",
            "class": "DataTable",
            "module": "datatable-scroll"
        },
        {
            "file": "/Users/lsmith/dev/yui3-gallery/src/gallery-datatable-350-preview/js/datatable.js",
            "line": 4726,
            "description": "Assigns the appropriate class to the `boundingBox` to identify the DataTable\nas horizontally scrolling, vertically scrolling, or both (adds both classes).\n\nClasses added are \"yui3-datatable-scrollable-x\" or \"...-y\"",
            "itemtype": "method",
            "name": "_uiSetScrollable",
            "access": "protected",
            "tagname": "",
            "class": "DataTable",
            "module": "datatable-scroll"
        },
        {
            "file": "/Users/lsmith/dev/yui3-gallery/src/gallery-datatable-350-preview/js/datatable.js",
            "line": 4742,
            "description": "Indicates horizontal table scrolling is enabled.",
            "itemtype": "property",
            "name": "_xScroll",
            "type": "{Boolean}",
            "default": "undefined (not initially set)",
            "access": "private",
            "tagname": "",
            "class": "DataTable",
            "module": "datatable-scroll"
        },
        {
            "file": "/Users/lsmith/dev/yui3-gallery/src/gallery-datatable-350-preview/js/datatable.js",
            "line": 4752,
            "description": "Indicates vertical table scrolling is enabled.",
            "itemtype": "property",
            "name": "_yScroll",
            "type": "{Boolean}",
            "default": "undefined (not initially set)",
            "access": "private",
            "tagname": "",
            "class": "DataTable",
            "module": "datatable-scroll"
        },
        {
            "file": "/Users/lsmith/dev/yui3-gallery/src/gallery-datatable-350-preview/js/datatable.js",
            "line": 4762,
            "description": "Overflow Node used to contain the data rows in a vertically scrolling table.",
            "itemtype": "property",
            "name": "_yScrollNode",
            "type": "{Node}",
            "default": "undefined (not initially set)",
            "access": "protected",
            "tagname": "",
            "class": "DataTable",
            "module": "datatable-scroll"
        },
        {
            "file": "/Users/lsmith/dev/yui3-gallery/src/gallery-datatable-350-preview/js/datatable.js",
            "line": 4772,
            "description": "Overflow Node used to contain the table headers and data in a horizontally\nscrolling table.",
            "itemtype": "property",
            "name": "_xScrollNode",
            "type": "{Node}",
            "default": "undefined (not initially set)",
            "access": "protected",
            "tagname": "",
            "class": "DataTable",
            "module": "datatable-scroll"
        },
        {
            "file": "/Users/lsmith/dev/yui3-gallery/src/gallery-datatable-350-preview/js/datatable.js",
            "line": 4912,
            "description": "Controls which column headers can trigger sorting by user clicks.\n\nAcceptable values are:\n\n * \"auto\" - (default) looks for `sortable: true` in the column configurations\n * `true` - all columns are enabled\n * `false - no UI sortable is enabled\n * {String[]} - array of key names to give sortable headers",
            "itemtype": "attribute",
            "name": "sortable",
            "type": "{String|String[]|Boolean}",
            "default": "\"auto\"",
            "class": "DataTable",
            "module": "datatable-sort"
        },
        {
            "file": "/Users/lsmith/dev/yui3-gallery/src/gallery-datatable-350-preview/js/datatable.js",
            "line": 4931,
            "description": "The current sort configuration to maintain in the data.\n\nAccepts column `key` strings or objects with a single property, the column\n`key`, with a value of 1, -1, \"asc\", or \"desc\".  E.g. `{ username: 'asc'\n}`.  String values are assumed to be ascending.\n\nExample values would be:\n\n * `\"username\"` - sort by the data's `username` field or the `key`\n   associated to a column with that `name`.\n * `{ username: \"desc\" }` - sort by `username` in descending order.\n   Alternately, use values \"asc\", 1 (same as \"asc\"), or -1 (same as \"desc\").\n * `[\"lastName\", \"firstName\"]` - ascending sort by `lastName`, but for\n   records with the same `lastName`, ascending subsort by `firstName`.\n   Array can have as many items as you want.\n * `[{ lastName: -1 }, \"firstName\"]` - descending sort by `lastName`,\n   ascending subsort by `firstName`. Mixed types are ok.",
            "itemtype": "attribute",
            "name": "sortBy",
            "type": "{String|String[]|Object|Object[]}",
            "class": "DataTable",
            "module": "datatable-sort"
        },
        {
            "file": "/Users/lsmith/dev/yui3-gallery/src/gallery-datatable-350-preview/js/datatable.js",
            "line": 4958,
            "description": "Strings containing language for sorting tooltips.",
            "itemtype": "attribute",
            "name": "strings",
            "type": "{Object}",
            "default": "(strings for current lang configured in the YUI instance config)",
            "class": "DataTable",
            "module": "datatable-sort"
        },
        {
            "file": "/Users/lsmith/dev/yui3-gallery/src/gallery-datatable-350-preview/js/datatable.js",
            "line": 4970,
            "description": "Sort the data in the `data` ModelList and refresh the table with the new\norder.\n\nAcceptable values for `fields` are `key` strings or objects with a single\nproperty, the column `key`, with a value of 1, -1, \"asc\", or \"desc\".  E.g.\n`{ username: 'asc' }`.  String values are assumed to be ascending.\n\nExample values would be:\n\n * `\"username\"` - sort by the data's `username` field or the `key`\n   associated to a column with that `name`.\n * `{ username: \"desc\" }` - sort by `username` in descending order.\n   Alternately, use values \"asc\", 1 (same as \"asc\"), or -1 (same as \"desc\").\n * `[\"lastName\", \"firstName\"]` - ascending sort by `lastName`, but for\n   records with the same `lastName`, ascending subsort by `firstName`.\n   Array can have as many items as you want.\n * `[{ lastName: -1 }, \"firstName\"]` - descending sort by `lastName`,\n   ascending subsort by `firstName`. Mixed types are ok.",
            "itemtype": "method",
            "name": "sort",
            "params": [
                {
                    "name": "fields",
                    "description": "The field(s) to sort by",
                    "type": "String|String[]|Object|Object[]"
                },
                {
                    "name": "payload",
                    "description": "Extra `sort` event payload you want to send along",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "DataTable"
            },
            "chainable": 1,
            "class": "DataTable",
            "module": "datatable-sort"
        },
        {
            "file": "/Users/lsmith/dev/yui3-gallery/src/gallery-datatable-350-preview/js/datatable.js",
            "line": 5002,
            "description": "Template for the node that will wrap the header content for sortable\ncolumns.",
            "itemtype": "property",
            "name": "SORTABLE_HEADER_TEMPLATE",
            "type": "{HTML}",
            "value": "'<div class=\"{className}\" title=\"{title}\" role=\"button\"></div>'",
            "class": "DataTable",
            "module": "datatable-sort"
        },
        {
            "file": "/Users/lsmith/dev/yui3-gallery/src/gallery-datatable-350-preview/js/datatable.js",
            "line": 5012,
            "description": "Reverse the current sort direction of one or more fields currently being\nsorted by.\n\nPass the `key` of the column or columns you want the sort order reversed\nfor.",
            "itemtype": "method",
            "name": "toggleSort",
            "params": [
                {
                    "name": "fields",
                    "description": "The field(s) to reverse sort order for",
                    "type": "String|String[]"
                },
                {
                    "name": "payload",
                    "description": "Extra `sort` event payload you want to send along",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "DataTable"
            },
            "chainable": 1,
            "class": "DataTable",
            "module": "datatable-sort"
        },
        {
            "file": "/Users/lsmith/dev/yui3-gallery/src/gallery-datatable-350-preview/js/datatable.js",
            "line": 5070,
            "description": "Sorts the `data` ModelList based on the new `sortBy` configuration.",
            "itemtype": "method",
            "name": "_afterSortByChange",
            "params": [
                {
                    "name": "e",
                    "description": "The `sortByChange` event",
                    "type": "EventFacade"
                }
            ],
            "access": "protected",
            "tagname": "",
            "class": "DataTable",
            "module": "datatable-sort"
        },
        {
            "file": "/Users/lsmith/dev/yui3-gallery/src/gallery-datatable-350-preview/js/datatable.js",
            "line": 5094,
            "description": "Applies the sorting logic to the new ModelList if the `newVal` is a new\nModelList.",
            "itemtype": "method",
            "name": "_afterSortDataChange",
            "params": [
                {
                    "name": "e",
                    "description": "the `dataChange` event",
                    "type": "EventFacade"
                }
            ],
            "access": "protected",
            "tagname": "",
            "class": "DataTable",
            "module": "datatable-sort"
        },
        {
            "file": "/Users/lsmith/dev/yui3-gallery/src/gallery-datatable-350-preview/js/datatable.js",
            "line": 5112,
            "description": "Checks if any of the fields in the modified record are fields that are\ncurrently being sorted by, and if so, resorts the `data` ModelList.",
            "itemtype": "method",
            "name": "_afterSortRecordChange",
            "params": [
                {
                    "name": "e",
                    "description": "The Model's `change` event",
                    "type": "EventFacade"
                }
            ],
            "access": "protected",
            "tagname": "",
            "class": "DataTable",
            "module": "datatable-sort"
        },
        {
            "file": "/Users/lsmith/dev/yui3-gallery/src/gallery-datatable-350-preview/js/datatable.js",
            "line": 5131,
            "description": "Subscribes to state changes that warrant updating the UI, and adds the\nclick handler for triggering the sort operation from the UI.",
            "itemtype": "method",
            "name": "_bindSortUI",
            "access": "protected",
            "tagname": "",
            "class": "DataTable",
            "module": "datatable-sort"
        },
        {
            "file": "/Users/lsmith/dev/yui3-gallery/src/gallery-datatable-350-preview/js/datatable.js",
            "line": 5149,
            "description": "Sets the `sortBy` attribute from the `sort` event's `e.sortBy` value.",
            "itemtype": "method",
            "name": "_defSortFn",
            "params": [
                {
                    "name": "e",
                    "description": "The `sort` event",
                    "type": "EventFacade"
                }
            ],
            "access": "protected",
            "tagname": "",
            "class": "DataTable",
            "module": "datatable-sort"
        },
        {
            "file": "/Users/lsmith/dev/yui3-gallery/src/gallery-datatable-350-preview/js/datatable.js",
            "line": 5160,
            "description": "Removes the click subscription from the header for sorting.",
            "itemtype": "method",
            "name": "destructor",
            "access": "protected",
            "tagname": "",
            "class": "DataTable",
            "module": "datatable-sort"
        },
        {
            "file": "/Users/lsmith/dev/yui3-gallery/src/gallery-datatable-350-preview/js/datatable.js",
            "line": 5172,
            "description": "Getter for the `sortBy` attribute.\n\nSupports the special subattribute \"sortBy.state\" to get a normalized JSON\nversion of the current sort state.  Otherwise, returns the last assigned\nvalue.\n\nFor example:\n\n<pre><code>var table = new Y.DataTable({\n    columns: [ ... ],\n    data: [ ... ],\n    sortBy: 'username'\n});\n\ntable.get('sortBy'); // 'username'\ntable.get('sortBy.state'); // { key: 'username', dir: 1 }\n\ntable.sort(['lastName', { firstName: \"desc\" }]);\ntable.get('sortBy'); // ['lastName', { firstName: \"desc\" }]\ntable.get('sortBy.state'); // [{ key: \"lastName\", dir: 1 }, { key: \"firstName\", dir: -1 }]\n</code></pre>",
            "itemtype": "method",
            "name": "_getSortBy",
            "params": [
                {
                    "name": "val",
                    "description": "The current sortBy value",
                    "type": "String|String[]|Object|Object[]"
                },
                {
                    "name": "detail",
                    "description": "String passed to `get(HERE)`. to parse subattributes",
                    "type": "String"
                }
            ],
            "access": "protected",
            "tagname": "",
            "class": "DataTable",
            "module": "datatable-sort"
        },
        {
            "file": "/Users/lsmith/dev/yui3-gallery/src/gallery-datatable-350-preview/js/datatable.js",
            "line": 5225,
            "description": "Sets up the initial sort state and instance properties.  Publishes events\nand subscribes to attribute change events to maintain internal state.",
            "itemtype": "method",
            "name": "initializer",
            "access": "protected",
            "tagname": "",
            "class": "DataTable",
            "module": "datatable-sort"
        },
        {
            "file": "/Users/lsmith/dev/yui3-gallery/src/gallery-datatable-350-preview/js/datatable.js",
            "line": 5257,
            "description": "Creates a `_compare` function for the `data` ModelList to allow custom\nsorting by multiple fields.",
            "itemtype": "method",
            "name": "_initSortFn",
            "access": "protected",
            "tagname": "",
            "class": "DataTable",
            "module": "datatable-sort"
        },
        {
            "file": "/Users/lsmith/dev/yui3-gallery/src/gallery-datatable-350-preview/js/datatable.js",
            "line": 5307,
            "description": "Add the sort related strings to the `strings` map.",
            "itemtype": "method",
            "name": "_initSortStrings",
            "access": "protected",
            "tagname": "",
            "class": "DataTable",
            "module": "datatable-sort"
        },
        {
            "file": "/Users/lsmith/dev/yui3-gallery/src/gallery-datatable-350-preview/js/datatable.js",
            "line": 5319,
            "description": "Fires the `sort` event in response to user clicks on sortable column\nheaders.",
            "itemtype": "method",
            "name": "_onUITriggerSort",
            "params": [
                {
                    "name": "e",
                    "description": "The `click` event",
                    "type": "DOMEventFacade"
                }
            ],
            "access": "protected",
            "tagname": "",
            "class": "DataTable",
            "module": "datatable-sort"
        },
        {
            "file": "/Users/lsmith/dev/yui3-gallery/src/gallery-datatable-350-preview/js/datatable.js",
            "line": 5356,
            "description": "Normalizes the possible input values for the `sortable` attribute, storing\nthe results in the `_sortable` property.",
            "itemtype": "method",
            "name": "_parseSortable",
            "access": "protected",
            "tagname": "",
            "class": "DataTable",
            "module": "datatable-sort"
        },
        {
            "file": "/Users/lsmith/dev/yui3-gallery/src/gallery-datatable-350-preview/js/datatable.js",
            "line": 5397,
            "description": "Initial application of the sortable UI.",
            "itemtype": "method",
            "name": "_renderSortable",
            "access": "protected",
            "tagname": "",
            "class": "DataTable",
            "module": "datatable-sort"
        },
        {
            "file": "/Users/lsmith/dev/yui3-gallery/src/gallery-datatable-350-preview/js/datatable.js",
            "line": 5409,
            "description": "Parses the current `sortBy` attribute into a normalized structure for the\n`data` ModelList's `_compare` method.  Also updates the column\nconfigurations' `sortDir` properties.",
            "itemtype": "method",
            "name": "_setSortBy",
            "access": "protected",
            "tagname": "",
            "class": "DataTable",
            "module": "datatable-sort"
        },
        {
            "file": "/Users/lsmith/dev/yui3-gallery/src/gallery-datatable-350-preview/js/datatable.js",
            "line": 5476,
            "description": "Array of column configuration objects of those columns that need UI setup\nfor user interaction.",
            "itemtype": "property",
            "name": "_sortable",
            "type": "{Object[]}",
            "access": "protected",
            "tagname": "",
            "class": "DataTable",
            "module": "datatable-sort"
        },
        {
            "file": "/Users/lsmith/dev/yui3-gallery/src/gallery-datatable-350-preview/js/datatable.js",
            "line": 5486,
            "description": "Array of column configuration objects for those columns that are currently\nbeing used to sort the data.  Fake column objects are used for fields that\nare not rendered as columns.",
            "itemtype": "property",
            "name": "_sortBy",
            "type": "{Object[]}",
            "access": "protected",
            "tagname": "",
            "class": "DataTable",
            "module": "datatable-sort"
        },
        {
            "file": "/Users/lsmith/dev/yui3-gallery/src/gallery-datatable-350-preview/js/datatable.js",
            "line": 5497,
            "description": "Replacement `comparator` for the `data` ModelList that defers sorting logic\nto the `_compare` method.  The deferral is accomplished by returning `this`.",
            "itemtype": "method",
            "name": "_sortComparator",
            "params": [
                {
                    "name": "item",
                    "description": "The record being evaluated for sort position",
                    "type": "Model"
                }
            ],
            "return": {
                "description": "The record",
                "type": "Model"
            },
            "access": "protected",
            "tagname": "",
            "class": "DataTable",
            "module": "datatable-sort"
        },
        {
            "file": "/Users/lsmith/dev/yui3-gallery/src/gallery-datatable-350-preview/js/datatable.js",
            "line": 5511,
            "description": "Applies the appropriate classes to the `boundingBox` and column headers to\nindicate sort state and sortability.\n\nAlso currently wraps the header content of sortable columns in a `<div>`\nliner to give a CSS anchor for sort indicators.",
            "itemtype": "method",
            "name": "_uiSetSortable",
            "access": "protected",
            "tagname": "",
            "class": "DataTable",
            "module": "datatable-sort"
        },
        {
            "file": "/Users/lsmith/dev/yui3-gallery/src/gallery-datatable-350-preview/js/datatable.js",
            "line": 5576,
            "description": "Allows values `true`, `false`, \"auto\", or arrays of column names through.",
            "itemtype": "method",
            "name": "_validateSortable",
            "params": [
                {
                    "name": "val",
                    "description": "The input value to `set(\"sortable\", VAL)`",
                    "type": "Any"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "access": "protected",
            "tagname": "",
            "class": "DataTable",
            "module": "datatable-sort"
        },
        {
            "file": "/Users/lsmith/dev/yui3-gallery/src/gallery-datatable-350-preview/js/datatable.js",
            "line": 5588,
            "description": "Allows strings, arrays of strings, objects, or arrays of objects.",
            "itemtype": "method",
            "name": "_validateSortBy",
            "params": [
                {
                    "name": "val",
                    "description": "The new `sortBy` value",
                    "type": "String|String[]|Object|Object[]"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "access": "protected",
            "tagname": "",
            "class": "DataTable",
            "module": "datatable-sort"
        },
        {
            "file": "/Users/lsmith/dev/yui3-gallery/src/gallery-jsonp/js/jsonp.js",
            "line": 44,
            "description": "RegExp used by the default URL formatter to insert the generated callback\nname into the JSONP url.  Looks for a query param callback=.  If a value is\nassigned, it will be clobbered.",
            "itemtype": "method",
            "name": "JSONPRequest._pattern",
            "type": "RegExp",
            "default": "/\\bcallback=.*?(?=&|$)/i",
            "access": "protected",
            "tagname": "",
            "static": 1,
            "class": "JSONPRequest",
            "module": "gallery-jsonp"
        },
        {
            "file": "/Users/lsmith/dev/yui3-gallery/src/gallery-jsonp/js/jsonp.js",
            "line": 57,
            "description": "Template used by the default URL formatter to add the callback function name\nto the url.",
            "itemtype": "method",
            "name": "JSONPRequest._template",
            "type": "String",
            "default": "\"callback={callback}\"",
            "access": "protected",
            "tagname": "",
            "static": 1,
            "class": "JSONPRequest",
            "module": "gallery-jsonp"
        },
        {
            "file": "/Users/lsmith/dev/yui3-gallery/src/gallery-jsonp/js/jsonp.js",
            "line": 70,
            "description": "Set up the success and failure handlers and the regex pattern used\nto insert the temporary callback name in the url.",
            "itemtype": "method",
            "name": "_init",
            "params": [
                {
                    "name": "url",
                    "description": "the url of the JSONP service",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "Optional success callback or config\n                 object containing success and failure functions and\n                 the url regex.",
                    "type": "Object|Function"
                }
            ],
            "access": "protected",
            "tagname": "",
            "class": "JSONPRequest",
            "module": "gallery-jsonp"
        },
        {
            "file": "/Users/lsmith/dev/yui3-gallery/src/gallery-jsonp/js/jsonp.js",
            "line": 106,
            "description": "<p>Parses the url for a callback named explicitly in the string.\nOverride this if the target JSONP service uses a different query\nparameter or url format.</p>\n\n<p>If the callback is declared inline, the corresponding function will\nbe returned.  Otherwise null.</p>",
            "itemtype": "method",
            "name": "_getCallbackFromUrl",
            "params": [
                {
                    "name": "url",
                    "description": "the url to search in",
                    "type": "String"
                }
            ],
            "return": {
                "description": "the callback function if found, or null",
                "type": "Function"
            },
            "access": "protected",
            "tagname": "",
            "class": "JSONPRequest",
            "module": "gallery-jsonp"
        },
        {
            "file": "/Users/lsmith/dev/yui3-gallery/src/gallery-jsonp/js/jsonp.js",
            "line": 150,
            "description": "Issues the JSONP request.",
            "itemtype": "method",
            "name": "send",
            "chainable": 1,
            "class": "JSONPRequest",
            "module": "gallery-jsonp"
        },
        {
            "file": "/Users/lsmith/dev/yui3-gallery/src/gallery-jsonp/js/jsonp.js",
            "line": 188,
            "description": "Default url formatter.  Looks for callback= in the url and appends it\nif not present.  The supplied proxy name will be assigned to the query\nparam.  Override this method by passing a function as the\n&quot;format&quot; property in the config object to the constructor.",
            "itemtype": "method",
            "name": "_format",
            "params": [
                {
                    "name": "url",
                    "description": "the original url",
                    "type": "String"
                },
                {
                    "name": "proxy",
                    "description": "the function name that will be used as a proxy to\n     the configured callback methods.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "fully qualified JSONP url",
                "type": "String"
            },
            "access": "protected",
            "tagname": "",
            "class": "JSONPRequest",
            "module": "gallery-jsonp"
        },
        {
            "file": "/Users/lsmith/dev/yui3-gallery/src/gallery-jsonp/js/jsonp.js",
            "line": 220,
            "itemtype": "method",
            "name": "Y.jsonp",
            "params": [
                {
                    "name": "url",
                    "description": "{String} the url of the JSONP service with the \n          placeholder where the callback function name typically goes.",
                    "type": "Callback"
                },
                {
                    "name": "c",
                    "description": "Callback function accepting the JSON payload\n          as its argument, or a configuration object (see above).",
                    "type": "Function|Object"
                }
            ],
            "return": {
                "description": "",
                "type": "JSONPRequest"
            },
            "static": 1,
            "class": "JSONPRequest",
            "module": "gallery-jsonp"
        },
        {
            "file": "/Users/lsmith/dev/yui3-gallery/src/gallery-torelativetime/js/torelativetime.js",
            "line": 11,
            "itemtype": "method",
            "name": "toRelativeTime",
            "params": [
                {
                    "name": "d",
                    "description": "the Date to translate.",
                    "type": "Date"
                },
                {
                    "name": "from",
                    "description": "(optional) reference Date. Default is now.",
                    "type": "Date"
                }
            ],
            "return": {
                "description": "the delta between from and d, in human readable form",
                "type": "String"
            },
            "class": "YUI~toRelativeTime",
            "module": "gallery-torelativetime"
        },
        {
            "file": "/Users/lsmith/dev/yui3-gallery/src/gallery-torelativetime/js/torelativetime.js",
            "line": 98,
            "description": "The strings to use for relative times.  Represent Numbers (minutes, hours,\ndays) as X (e.g. \"about X hours ago\"). Keys are now, seconds, minute,\nminutes, hour, hours, day, and days.",
            "itemtype": "property",
            "name": "toRelativeTime.strings",
            "type": "{Object}",
            "class": "YUI~toRelativeTime",
            "module": "gallery-torelativetime"
        },
        {
            "file": "/Users/lsmith/dev/yui3-gallery/src/gallery-dataschema-class/js/dataschema-class.js",
            "line": 33,
            "description": "Initialize the instance, resolve the configured schema parser\nimplementation, and add any other properties or custom methods onto this\nobject.  Generally, the \"any other properties\" should be just the\nschema.",
            "itemtype": "method",
            "name": "_init",
            "params": [
                {
                    "name": "config",
                    "description": "object passed in from constructor",
                    "type": "Object"
                }
            ],
            "access": "protected",
            "tagname": "",
            "class": "DataSchema",
            "module": "dataschema",
            "submodule": "dataschema-class"
        },
        {
            "file": "/Users/lsmith/dev/yui3-gallery/src/gallery-dataschema-class/js/dataschema-class.js",
            "line": 51,
            "description": "<p>Resolves the configured type to an implementation object (e.g.\nY.DataSchema.JSON).</p>\n\n<p>Accepts type as a string, object, or function.  Defalts to\nY.DataSchema.Base.</p>\n\n<p>If a string is supplied, an implementation is searched for as a\nstatic property of Y.DataSchema.  If one cannot be found, two more\nattempts are made with the string in upper case and then the string with\nfirst letter capitalized.</p>\n\n<p>If an object that contains a method named \"apply\" is passed, that\nobject is used.</p>\n\n<p>If a function is passed, that function is treated as the \"apply\"\nmethod of a Y.DataSchema.Base implementation.</p>",
            "itemtype": "method",
            "name": "_resolve",
            "params": [
                {
                    "name": "type",
                    "description": "schema parser implemantation, its\n name, or a custom apply function to use over Base implementation",
                    "type": "Object|String|Function"
                }
            ],
            "return": {
                "description": "DataSchema parser implementation object",
                "type": "Object"
            },
            "access": "protected",
            "tagname": "",
            "class": "DataSchema",
            "module": "dataschema",
            "submodule": "dataschema-class"
        },
        {
            "file": "/Users/lsmith/dev/yui3-gallery/src/gallery-dataschema-class/js/dataschema-class.js",
            "line": 96,
            "description": "Pass the data to the schema parser implementation with the configured\nschema.",
            "itemtype": "method",
            "name": "apply",
            "params": [
                {
                    "name": "data",
                    "description": "input data to be parsed by the schema implementation",
                    "type": "Mixed"
                }
            ],
            "return": {
                "description": "Schema-parsed data",
                "type": "Object"
            },
            "class": "DataSchema",
            "module": "dataschema",
            "submodule": "dataschema-class"
        },
        {
            "file": "/Users/lsmith/dev/yui3-gallery/src/gallery-pluginattr/js/attr.js",
            "line": 13,
            "description": "Register a Plugin with an activation attribute on a host class.\nSetting this attribute at construction or at run time will cause the\nPlugin to be plugged into the instance.\n\nBy default, trigger attributes will support values `true` or a configuration\nobject to `plug()` the plugin and `false` to `unplug()` it.\n\nTo support enhancing host instance behavior when the plugin is\n`use()`d after the host instance is instantiated, you can also pass the\ninstance as the second parameter.\n\nTo allow custom values to be passed to the trigger attribute, pass a\npreprocessor function as the fourth parameter. The value assigned to the\nattribute will be translated by this function prior to getting passed to\n`plug()` as the configuration.  Return false from this function to cause\nthe plugin to be unplugged.\n\nThe host class must have a static `ATTRS` collection.",
            "example": [
                " Add \"draggable\" triggering attribute to Y.DataTable.Base:\n\n    Y.Plugin.addHostAttr('sortable', Y.DataTable.Base, Y.Plugin.DataTableSort);\n\n    var table = new Y.DataTable({ sortable: true }); // plugs DTSort\n    table.set('sortable', false); // unplugs DTSort",
                " Add support for custom values passed to the triggering attribute\n\n    // Add a triggering attribute \"filters\" that accepts true|false or\n    // a configuration object (out-of-the-box support), as well as a single\n    // string or string array to pass as the plugin's \"category\" configuration\n    Y.Plugin.addHostAttr('filters', Y.Console, Y.Plugin.ConsoleFilters,\n         function (config) {\n             if (Y.Lang.isString(config) || Y.Lang.isArray(config)) {\n                 config = {\n                     defaultVisibility: false,\n                     category: Y.Array.hash(Y.Array(config))\n                 };\n             }\n\n            return config;\n        }\n    });\n\n    var con = new Y.Console({ filters: ['warn', 'error'] });"
            ],
            "itemtype": "method",
            "name": "Plugin.addHostAttr",
            "params": [
                {
                    "name": "name",
                    "description": "The attribute name to trigger plug and unplug",
                    "type": "String"
                },
                {
                    "name": "host",
                    "description": "The class or instance to receive the\n                              triggering attribute",
                    "type": "Function|Object"
                },
                {
                    "name": "plugin",
                    "description": "The plugin class",
                    "type": "Function"
                },
                {
                    "name": "setter",
                    "description": "Attribute value preprocessor",
                    "type": "Function",
                    "optional": true
                },
                {
                    "name": "force",
                    "description": "Redefine an existing host attribue?",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "static": 1,
            "class": "Plugin",
            "module": "gallery-pluginattr"
        },
        {
            "file": "/Users/lsmith/dev/yui3-gallery/src/gallery-event-konami/js/konami.js",
            "line": 45,
            "description": "Provides a subscribable event named &quot;konami&quot;.",
            "itemtype": "event",
            "name": "konami",
            "params": [
                {
                    "name": "type",
                    "description": "'konami'",
                    "type": "String"
                },
                {
                    "name": "fn",
                    "description": "the callback function",
                    "type": "Function"
                },
                {
                    "name": "id",
                    "description": "the element to bind (typically document)",
                    "type": "String|Node|etc"
                },
                {
                    "name": "o",
                    "description": "optional context object",
                    "type": "Object"
                },
                {
                    "name": "args",
                    "description": "0..n additional arguments that should be provided \nto the listener."
                }
            ],
            "return": {
                "description": "the detach handle",
                "type": "Event.Handle"
            },
            "class": "YUI~event-konami",
            "module": "event-konami"
        },
        {
            "file": "/Users/lsmith/dev/yui3-gallery/src/gallery-event-drag/js/event-drag.js",
            "line": 107,
            "description": "Normalizes the third param of on() to a NodeList.  The resulting list\nmay be empty.",
            "itemtype": "method",
            "name": "Y.Node.DOM_EVENTS.drag._getNodes",
            "params": [
                {
                    "name": "el",
                    "description": "valid context for on()",
                    "type": "String|Node|NodeList|HTMLElement|Array"
                }
            ],
            "return": {
                "description": "NodeList"
            },
            "access": "protected",
            "tagname": "",
            "class": "YUI~event-drag",
            "module": "event-drag"
        },
        {
            "file": "/Users/lsmith/dev/yui3-gallery/src/gallery-event-drag/js/event-drag.js",
            "line": 128,
            "description": "Applies the attribute values from the config object to the Drag instance.\nAlso checks for loaded Plugins by the name of the property to apply.",
            "itemtype": "method",
            "name": "Y.Node.DOM_EVENTS.drag._applyConfig",
            "params": [
                {
                    "name": "dd",
                    "description": "the Drag plugin for the node",
                    "type": "Y.Plugin.Drag"
                },
                {
                    "name": "conf",
                    "description": "the attribute configuration",
                    "type": "Object"
                }
            ],
            "access": "protected",
            "tagname": "",
            "class": "YUI~event-drag",
            "module": "event-drag"
        },
        {
            "file": "/Users/lsmith/dev/yui3-gallery/src/gallery-event-drag/js/event-drag.js",
            "line": 167,
            "description": "Also &quot;drag:drag&quot;.  Subscribes to the respective event on the generated Drag instance.",
            "itemtype": "event",
            "name": "drag",
            "params": [
                {
                    "name": "type",
                    "description": "'drag'",
                    "type": "String"
                },
                {
                    "name": "fn",
                    "description": "the callback function",
                    "type": "Function"
                },
                {
                    "name": "id",
                    "description": "the element to bind (typically document)",
                    "type": "String|Node|etc"
                },
                {
                    "name": "conf",
                    "description": "(optional) configuration to pass to Drag constructor",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "the detach handle",
                "type": "Event.Handle"
            },
            "class": "YUI~event-drag",
            "module": "event-drag"
        },
        {
            "file": "/Users/lsmith/dev/yui3-gallery/src/gallery-event-drag/js/event-drag.js",
            "line": 178,
            "description": "Subscribes to the respective event on the generated Drag instance.",
            "itemtype": "event",
            "name": "drag:start",
            "params": [
                {
                    "name": "type",
                    "description": "'drag:start'",
                    "type": "String"
                },
                {
                    "name": "fn",
                    "description": "the callback function",
                    "type": "Function"
                },
                {
                    "name": "id",
                    "description": "the element to bind (typically document)",
                    "type": "String|Node|etc"
                },
                {
                    "name": "conf",
                    "description": "(optional) configuration to pass to Drag constructor",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "the detach handle",
                "type": "Event.Handle"
            },
            "class": "YUI~event-drag",
            "module": "event-drag"
        },
        {
            "file": "/Users/lsmith/dev/yui3-gallery/src/gallery-event-drag/js/event-drag.js",
            "line": 189,
            "description": "Subscribes to the respective event on the generated Drag instance.",
            "itemtype": "event",
            "name": "drag:end",
            "params": [
                {
                    "name": "type",
                    "description": "'drag:end'",
                    "type": "String"
                },
                {
                    "name": "fn",
                    "description": "the callback function",
                    "type": "Function"
                },
                {
                    "name": "id",
                    "description": "the element to bind (typically document)",
                    "type": "String|Node|etc"
                },
                {
                    "name": "conf",
                    "description": "(optional) configuration to pass to Drag constructor",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "the detach handle",
                "type": "Event.Handle"
            },
            "class": "YUI~event-drag",
            "module": "event-drag"
        },
        {
            "file": "/Users/lsmith/dev/yui3-gallery/src/gallery-event-drag/js/event-drag.js",
            "line": 200,
            "description": "Subscribes to the respective event on the generated Drag instance.",
            "itemtype": "event",
            "name": "drag:mouseDown",
            "params": [
                {
                    "name": "type",
                    "description": "'drag:mouseDown'",
                    "type": "String"
                },
                {
                    "name": "fn",
                    "description": "the callback function",
                    "type": "Function"
                },
                {
                    "name": "id",
                    "description": "the element to bind (typically document)",
                    "type": "String|Node|etc"
                },
                {
                    "name": "conf",
                    "description": "(optional) configuration to pass to Drag constructor",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "the detach handle",
                "type": "Event.Handle"
            },
            "class": "YUI~event-drag",
            "module": "event-drag"
        },
        {
            "file": "/Users/lsmith/dev/yui3-gallery/src/gallery-event-drag/js/event-drag.js",
            "line": 211,
            "description": "Subscribes to the respective event on the generated Drag instance.",
            "itemtype": "event",
            "name": "drag:afterMouseDown",
            "params": [
                {
                    "name": "type",
                    "description": "'drag:afterMouseDown'",
                    "type": "String"
                },
                {
                    "name": "fn",
                    "description": "the callback function",
                    "type": "Function"
                },
                {
                    "name": "id",
                    "description": "the element to bind (typically document)",
                    "type": "String|Node|etc"
                },
                {
                    "name": "conf",
                    "description": "(optional) configuration to pass to Drag constructor",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "the detach handle",
                "type": "Event.Handle"
            },
            "class": "YUI~event-drag",
            "module": "event-drag"
        },
        {
            "file": "/Users/lsmith/dev/yui3-gallery/src/gallery-event-drag/js/event-drag.js",
            "line": 222,
            "description": "Subscribes to the respective event on the generated Drag instance.",
            "itemtype": "event",
            "name": "drag:removeHandle",
            "params": [
                {
                    "name": "type",
                    "description": "'drag:removeHandle'",
                    "type": "String"
                },
                {
                    "name": "fn",
                    "description": "the callback function",
                    "type": "Function"
                },
                {
                    "name": "id",
                    "description": "the element to bind (typically document)",
                    "type": "String|Node|etc"
                },
                {
                    "name": "conf",
                    "description": "(optional) configuration to pass to Drag constructor",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "the detach handle",
                "type": "Event.Handle"
            },
            "class": "YUI~event-drag",
            "module": "event-drag"
        },
        {
            "file": "/Users/lsmith/dev/yui3-gallery/src/gallery-event-drag/js/event-drag.js",
            "line": 233,
            "description": "Subscribes to the respective event on the generated Drag instance.",
            "itemtype": "event",
            "name": "drag:addHandle",
            "params": [
                {
                    "name": "type",
                    "description": "'drag:addHandle'",
                    "type": "String"
                },
                {
                    "name": "fn",
                    "description": "the callback function",
                    "type": "Function"
                },
                {
                    "name": "id",
                    "description": "the element to bind (typically document)",
                    "type": "String|Node|etc"
                },
                {
                    "name": "conf",
                    "description": "(optional) configuration to pass to Drag constructor",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "the detach handle",
                "type": "Event.Handle"
            },
            "class": "YUI~event-drag",
            "module": "event-drag"
        },
        {
            "file": "/Users/lsmith/dev/yui3-gallery/src/gallery-event-drag/js/event-drag.js",
            "line": 244,
            "description": "Subscribes to the respective event on the generated Drag instance.",
            "itemtype": "event",
            "name": "drag:removeInvalid",
            "params": [
                {
                    "name": "type",
                    "description": "'drag:removeInvalid'",
                    "type": "String"
                },
                {
                    "name": "fn",
                    "description": "the callback function",
                    "type": "Function"
                },
                {
                    "name": "id",
                    "description": "the element to bind (typically document)",
                    "type": "String|Node|etc"
                },
                {
                    "name": "conf",
                    "description": "(optional) configuration to pass to Drag constructor",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "the detach handle",
                "type": "Event.Handle"
            },
            "class": "YUI~event-drag",
            "module": "event-drag"
        },
        {
            "file": "/Users/lsmith/dev/yui3-gallery/src/gallery-event-drag/js/event-drag.js",
            "line": 255,
            "description": "Subscribes to the respective event on the generated Drag instance.",
            "itemtype": "event",
            "name": "drag:addInvalid",
            "params": [
                {
                    "name": "type",
                    "description": "'drag:addInvalid'",
                    "type": "String"
                },
                {
                    "name": "fn",
                    "description": "the callback function",
                    "type": "Function"
                },
                {
                    "name": "id",
                    "description": "the element to bind (typically document)",
                    "type": "String|Node|etc"
                },
                {
                    "name": "conf",
                    "description": "(optional) configuration to pass to Drag constructor",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "the detach handle",
                "type": "Event.Handle"
            },
            "class": "YUI~event-drag",
            "module": "event-drag"
        },
        {
            "file": "/Users/lsmith/dev/yui3-gallery/src/gallery-event-drag/js/event-drag.js",
            "line": 266,
            "description": "Subscribes to the respective event on the generated Drag instance.",
            "itemtype": "event",
            "name": "drag:align",
            "params": [
                {
                    "name": "type",
                    "description": "'drag:align'",
                    "type": "String"
                },
                {
                    "name": "fn",
                    "description": "the callback function",
                    "type": "Function"
                },
                {
                    "name": "id",
                    "description": "the element to bind (typically document)",
                    "type": "String|Node|etc"
                },
                {
                    "name": "conf",
                    "description": "(optional) configuration to pass to Drag constructor",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "the detach handle",
                "type": "Event.Handle"
            },
            "class": "YUI~event-drag",
            "module": "event-drag"
        }
    ]
}