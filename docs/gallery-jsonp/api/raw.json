{"majorversion": 3, "classmap": {"JSONPRequest": {"name": "JSONPRequest", "constructors": [{"params": [{"type": "String", "name": "url", "description": "  the url of the JSONP service"}, {"type": "Object|Function", "name": "callback", "description": "  the callback configuration or success\nhandler"}], "description": "<p>Provides a JSONPRequest class for repeated JSONP calls, and a convenience\nmethod Y.jsonp(url, callback) to instantiate and send a JSONP request.</p>\n<p>The url of the JSONP service will have a proxy function assigned as the\ncallback name.  By default it will look for callback=(anything).  If\n(anything) is present, it will be clobbered by the proxy name.  And if the\ncallback= param can't be found, it will be appended to the url.</p>\n<p>To override this behavior, pass a function to the &quot;format&quot;\nproperty in the callback config.</p>\n<p>The second parameter can be a callback function that accepts the JSON\npayload as its argument, or a configuration object supporting the keys:</p>\n<ul>\n<li>success - function handler for successful transmission</li>\n<li>failure - function handler for failed transmission</li>\n<li>format - function for inserting the proxy name into the url</li>\n</ul>"}], "namespace": "", "module": "gallery-jsonp", "methods": {"_format": {"return": {"type": "String", "description": "fully qualified JSONP url"}, "description": "Default url formatter.  Looks for callback= in the url and appends it\nif not present.  The supplied proxy name will be assigned to the query\nparam.  Override this method by passing a function as the\n&quot;format&quot; property in the config object to the constructor.", "protected": "", "params": [{"type": "String", "name": "proxy", "description": "  the function name that will be used as a proxy to\nthe configured callback methods."}], "guessedname": "_format", "guessedtype": "function"}, "Y.jsonp": {"return": {"type": "JSONPRequest", "description": ""}, "static": "", "params": [{"type": "String} the url of the JSONP service with the {callback", "name": "url", "description": " \nplaceholder where the callback function name typically goes."}, {"type": "Function|Object", "name": "c", "description": "  Callback function accepting the JSON payload\nas its argument, or a configuration object (see above)."}], "guessedname": "jsonp", "guessedtype": "function"}, "_init": {"protected": "", "params": [{"type": "Object|Function", "name": "cfg", "description": "  The success callback or the config\nobject containing success and failure functions and\nthe url regex."}], "description": "Set up the success and failure handlers and the regex pattern used\nto insert the temporary callback name in the url.", "guessedname": "_init", "guessedtype": "function"}, "send": {"chainable": "", "description": "Issues the JSONP request.", "guessedname": "send", "guessedtype": "function"}}, "file": "l", "shortname": "JSONPRequest", "properties": {"_template": {"description": "Template used by the default URL formatter to add the callback function name\nto the url.", "default": "\"callback={callback}\"", "member": "JSONPRequest._template", "protected": "", "static": "", "guessedname": "_template", "guessedtype": "property", "type": "String"}, "_pattern": {"description": "RegExp used by the default URL formatter to insert the generated callback\nname into the JSONP url.  Looks for a query param callback=.  If a value is\nassigned, it will be clobbered.", "default": "/\\bcallback=.*?(?=&|$)/i", "member": "JSONPRequest._pattern", "protected": "", "static": "", "guessedname": "_pattern", "guessedtype": "property", "type": "RegExp"}}, "description": "<p>Provides a JSONPRequest class for repeated JSONP calls, and a convenience\nmethod Y.jsonp(url, callback) to instantiate and send a JSONP request.</p>\n<p>The url of the JSONP service will have a proxy function assigned as the\ncallback name.  By default it will look for callback=(anything).  If\n(anything) is present, it will be clobbered by the proxy name.  And if the\ncallback= param can't be found, it will be appended to the url.</p>\n<p>To override this behavior, pass a function to the &quot;format&quot;\nproperty in the callback config.</p>\n<p>The second parameter can be a callback function that accepts the JSON\npayload as its argument, or a configuration object supporting the keys:</p>\n<ul>\n<li>success - function handler for successful transmission</li>\n<li>failure - function handler for failed transmission</li>\n<li>format - function for inserting the proxy name into the url</li>\n</ul>"}}, "version": "3", "modules": {"gallery-jsonp": {"description": "<p>Provides a JSONPRequest class for repeated JSONP calls, and a convenience\nmethod Y.jsonp(url, callback) to instantiate and send a JSONP request.</p>\n<p>The url of the JSONP service will have a proxy function assigned as the\ncallback name.  By default it will look for callback=(anything).  If\n(anything) is present, it will be clobbered by the proxy name.  And if the\ncallback= param can't be found, it will be appended to the url.</p>\n<p>To override this behavior, pass a function to the &quot;format&quot;\nproperty in the callback config.</p>\n<p>The second parameter can be a callback function that accepts the JSON\npayload as its argument, or a configuration object supporting the keys:</p>\n<ul>\n<li>success - function handler for successful transmission</li>\n<li>failure - function handler for failed transmission</li>\n<li>format - function for inserting the proxy name into the url</li>\n</ul>", "submodules": [], "classlist": ["JSONPRequest"], "filelist": ["jsonp.js"], "subdata": {}, "name": "gallery-jsonp"}}, "filemap": {"jsonp.js": {"name": "jsonp.js", "classlist": [], "module": "gallery-jsonp", "guessedname": "l", "guessedtype": "property", "property": "l"}}}