{"majorversion": 3, "classmap": {"YUI~event-drag": {"file": "event-drag.js", "description": "<p>Provides subscribable drag events from Node or NodeLists.  Subscribing\nto any of the events causes the node to be plugged with Y.Plugin.Drag.  The\nconfig object passed can be used to set Drag instance attributes or add\nadditional Plugins to the Drag instance such as Y.Plugin.DDProxy.</p>\nConfig properties are formatted and tested for a corresponding Y.Plugin.* as\n'somePlugin' => Y.Plugin.DDSomePlugin if the property name doesn't already\nstart with \"DD\".  So { proxy: true } and { DDProxy: true } are functionally\nequivalent.  Both add Y.Plugin.DDProxy to the Drag instance.</p>\n<pre><code>node.on('drag:start', fn, { proxy: true, data: 123 });</code></pre>\n<p>This adds Y.Plugin.DDProxy to the Drag instance and also set's the Drag instance's data attribute.</p>\n<p>Passing any value will result in the Plugin being added, but if you pass\nan object literal as the value, it will be sent to the Plugin's\nconstructor.</p>\n<pre><code>node.on('drag:end', fn, {\nconstrained: { constrain2node: '#container' }\n});</code></pre>\n<p>This adds Y.Plugin.DDConstrained to the Drag instance using the specified\nconfiguration.</p>\n<p>A custom detach handle is returned, whose detach method unplugs the\nY.Plugin.Drag from the node(s).</p>\n<p>Supported events are:</p>\n<ul>\n<li>drag or drag:drag</li>\n<li>drag:start</li>\n<li>drag:end</li>\n<li>drag:mouseDown</li>\n<li>drag:afterMouseDown</li>\n<li>drag:removeHandle</li>\n<li>drag:addHandle</li>\n<li>drag:removeInvalid</li>\n<li>drag:addInvalid</li>\n<li>drag:align</li>\n</ul>\n<p>Additionally, the default callback context is overridden to the\nsubscribing Node unless otherwise specified during the subscription.\nSo &quot;this&quot; in the callback will refer to the node.  On the\nevent object passed to subscribers, <code>e.currentTarget</code> is also the\nNode regardless of context override.  The Drag instance is available from\nthe Node as <code>node.dd</code>.</p>", "namespace": "", "module": "event-drag", "methods": {"Y.Node.DOM_EVENTS.drag._applyConfig": {"protected": "", "params": [{"type": "Y.Plugin.Drag", "name": "dd", "description": "  the Drag plugin for the node"}, {"type": "Object", "name": "conf", "description": "  the attribute configuration"}], "description": "Applies the attribute values from the config object to the Drag instance.\nAlso checks for loaded Plugins by the name of the property to apply.", "guessedname": "_applyConfig", "guessedtype": "function"}, "Y.Node.DOM_EVENTS.drag._getNodes": {"return": {"type": "", "description": "NodeList"}, "description": "Normalizes the third param of on() to a NodeList.  The resulting list\nmay be empty.", "protected": "", "params": [{"type": "String|Node|NodeList|HTMLElement|Array", "name": "el", "description": "  valid context for on()"}], "guessedname": "_getNodes", "guessedtype": "function"}}, "guessedname": "eventPlugin", "guessedtype": "property", "shortname": "YUI~event-drag", "events": {"drag:addInvalid": {"return": "{Event.Handle} the detach handle", "params": [{"type": "String", "name": "type", "description": "  'drag:addInvalid'"}, {"type": "Function", "name": "fn", "description": "  the callback function"}, {"type": "String|Node|etc", "name": "id", "description": "  the element to bind (typically document)"}, {"type": "Object", "name": "conf", "description": "  (optional) configuration to pass to Drag constructor"}], "description": "Subscribes to the respective event on the generated Drag instance."}, "drag:afterMouseDown": {"return": "{Event.Handle} the detach handle", "params": [{"type": "String", "name": "type", "description": "  'drag:afterMouseDown'"}, {"type": "Function", "name": "fn", "description": "  the callback function"}, {"type": "String|Node|etc", "name": "id", "description": "  the element to bind (typically document)"}, {"type": "Object", "name": "conf", "description": "  (optional) configuration to pass to Drag constructor"}], "description": "Subscribes to the respective event on the generated Drag instance."}, "drag:mouseDown": {"return": "{Event.Handle} the detach handle", "params": [{"type": "String", "name": "type", "description": "  'drag:mouseDown'"}, {"type": "Function", "name": "fn", "description": "  the callback function"}, {"type": "String|Node|etc", "name": "id", "description": "  the element to bind (typically document)"}, {"type": "Object", "name": "conf", "description": "  (optional) configuration to pass to Drag constructor"}], "description": "Subscribes to the respective event on the generated Drag instance."}, "drag:align": {"return": "{Event.Handle} the detach handle", "params": [{"type": "String", "name": "type", "description": "  'drag:align'"}, {"type": "Function", "name": "fn", "description": "  the callback function"}, {"type": "String|Node|etc", "name": "id", "description": "  the element to bind (typically document)"}, {"type": "Object", "name": "conf", "description": "  (optional) configuration to pass to Drag constructor"}], "description": "Subscribes to the respective event on the generated Drag instance."}, "drag:addHandle": {"return": "{Event.Handle} the detach handle", "params": [{"type": "String", "name": "type", "description": "  'drag:addHandle'"}, {"type": "Function", "name": "fn", "description": "  the callback function"}, {"type": "String|Node|etc", "name": "id", "description": "  the element to bind (typically document)"}, {"type": "Object", "name": "conf", "description": "  (optional) configuration to pass to Drag constructor"}], "description": "Subscribes to the respective event on the generated Drag instance."}, "drag": {"return": "{Event.Handle} the detach handle", "params": [{"type": "String", "name": "type", "description": "  'drag'"}, {"type": "Function", "name": "fn", "description": "  the callback function"}, {"type": "String|Node|etc", "name": "id", "description": "  the element to bind (typically document)"}, {"type": "Object", "name": "conf", "description": "  (optional) configuration to pass to Drag constructor"}], "description": "Also &quot;drag:drag&quot;.  Subscribes to the respective event on the generated Drag instance."}, "drag:removeHandle": {"return": "{Event.Handle} the detach handle", "params": [{"type": "String", "name": "type", "description": "  'drag:removeHandle'"}, {"type": "Function", "name": "fn", "description": "  the callback function"}, {"type": "String|Node|etc", "name": "id", "description": "  the element to bind (typically document)"}, {"type": "Object", "name": "conf", "description": "  (optional) configuration to pass to Drag constructor"}], "description": "Subscribes to the respective event on the generated Drag instance."}, "drag:start": {"return": "{Event.Handle} the detach handle", "params": [{"type": "String", "name": "type", "description": "  'drag:start'"}, {"type": "Function", "name": "fn", "description": "  the callback function"}, {"type": "String|Node|etc", "name": "id", "description": "  the element to bind (typically document)"}, {"type": "Object", "name": "conf", "description": "  (optional) configuration to pass to Drag constructor"}], "description": "Subscribes to the respective event on the generated Drag instance."}, "drag:end": {"return": "{Event.Handle} the detach handle", "params": [{"type": "String", "name": "type", "description": "  'drag:end'"}, {"type": "Function", "name": "fn", "description": "  the callback function"}, {"type": "String|Node|etc", "name": "id", "description": "  the element to bind (typically document)"}, {"type": "Object", "name": "conf", "description": "  (optional) configuration to pass to Drag constructor"}], "description": "Subscribes to the respective event on the generated Drag instance."}, "drag:removeInvalid": {"return": "{Event.Handle} the detach handle", "params": [{"type": "String", "name": "type", "description": "  'drag:removeInvalid'"}, {"type": "Function", "name": "fn", "description": "  the callback function"}, {"type": "String|Node|etc", "name": "id", "description": "  the element to bind (typically document)"}, {"type": "Object", "name": "conf", "description": "  (optional) configuration to pass to Drag constructor"}], "description": "Subscribes to the respective event on the generated Drag instance."}}, "name": "YUI~event-drag"}}, "version": "3", "modules": {"event-drag": {"description": "<p>Provides subscribable drag events from Node or NodeLists.  Subscribing\nto any of the events causes the node to be plugged with Y.Plugin.Drag.  The\nconfig object passed can be used to set Drag instance attributes or add\nadditional Plugins to the Drag instance such as Y.Plugin.DDProxy.</p>\nConfig properties are formatted and tested for a corresponding Y.Plugin.* as\n'somePlugin' => Y.Plugin.DDSomePlugin if the property name doesn't already\nstart with \"DD\".  So { proxy: true } and { DDProxy: true } are functionally\nequivalent.  Both add Y.Plugin.DDProxy to the Drag instance.</p>\n<pre><code>node.on('drag:start', fn, { proxy: true, data: 123 });</code></pre>\n<p>This adds Y.Plugin.DDProxy to the Drag instance and also set's the Drag instance's data attribute.</p>\n<p>Passing any value will result in the Plugin being added, but if you pass\nan object literal as the value, it will be sent to the Plugin's\nconstructor.</p>\n<pre><code>node.on('drag:end', fn, {\nconstrained: { constrain2node: '#container' }\n});</code></pre>\n<p>This adds Y.Plugin.DDConstrained to the Drag instance using the specified\nconfiguration.</p>\n<p>A custom detach handle is returned, whose detach method unplugs the\nY.Plugin.Drag from the node(s).</p>\n<p>Supported events are:</p>\n<ul>\n<li>drag or drag:drag</li>\n<li>drag:start</li>\n<li>drag:end</li>\n<li>drag:mouseDown</li>\n<li>drag:afterMouseDown</li>\n<li>drag:removeHandle</li>\n<li>drag:addHandle</li>\n<li>drag:removeInvalid</li>\n<li>drag:addInvalid</li>\n<li>drag:align</li>\n</ul>\n<p>Additionally, the default callback context is overridden to the\nsubscribing Node unless otherwise specified during the subscription.\nSo &quot;this&quot; in the callback will refer to the node.  On the\nevent object passed to subscribers, <code>e.currentTarget</code> is also the\nNode regardless of context override.  The Drag instance is available from\nthe Node as <code>node.dd</code>.</p>", "submodules": [], "classlist": ["YUI~event-drag"], "filelist": ["event-drag.js"], "subdata": {}, "name": "event-drag"}}, "filemap": {"event-drag.js": {"classlist": ["YUI~event-drag"], "name": "event-drag.js", "module": "event-drag"}}}